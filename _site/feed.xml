<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-09-15T16:30:20+10:00</updated><id>http://localhost:4000/</id><title type="html">Ting’s Square.</title><subtitle>Copyright Ting Ting Hsu</subtitle><entry><title type="html">30天修煉Ruby面試精選30題 - Day06 Ruby三種存取限制Public, Protect, Private</title><link href="http://localhost:4000/ruby/rails/interview/junior/2018/09/15/day06_ruby_interview_questions_public_protected_private_method.html" rel="alternate" type="text/html" title="30天修煉Ruby面試精選30題 - Day06 Ruby三種存取限制Public, Protect, Private" /><published>2018-09-15T14:50:00+10:00</published><updated>2018-09-15T14:50:00+10:00</updated><id>http://localhost:4000/ruby/rails/interview/junior/2018/09/15/day06_ruby_interview_questions_public_protected_private_method</id><content type="html" xml:base="http://localhost:4000/ruby/rails/interview/junior/2018/09/15/day06_ruby_interview_questions_public_protected_private_method.html">&lt;p&gt;前情提要： 在第五天的最後，我們提到了一句話”相同的class的實體也無法使用別人的singleton method”。在今天，我們繼續把焦點放在Ruby的method, 繼續鋪陳存取限制:)&lt;/p&gt;

&lt;h1 id=&quot;ruby經典面試題目-06&quot;&gt;Ruby經典面試題目 #06&lt;/h1&gt;
&lt;p&gt;說明Ruby的三種存取限制。&lt;/p&gt;

&lt;p&gt;3 levels of access control for Ruby methods.&lt;/p&gt;

&lt;p&gt;讓我們用程式碼分別描述三種存取：&lt;code class=&quot;highlighter-rouge&quot;&gt;Public&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Protected&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Private&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  class TingsIronmanProcess
    def publish
      p &quot;Hi guys, this is my IT article for today!&quot;
    end

    protected
    def mydraft
      p &quot;Hi Mentor! Please read my draft.&quot;
    end

    private
    def myspace
      p &quot;I'm writing secretly here!&quot;
    end
  end

 day6 = TingsIronmanProcess.new
 day6.publish # =&amp;gt; Hi guys, this is my IT article for today!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;以我自己生產第六天IT邦鐵人賽文章為例，我通常在本機上編寫每天的主體，在這段時間要搜集素材、測試程式碼，這個過程可能會有很多生產上的秘密、需要刪除的錯誤等等之類的，過程艱辛不足為外人道矣，所以放在private的myspace孤芳自賞就好。&lt;/p&gt;

&lt;p&gt;等到文章接近完成度高、可讀性佳的地步，就放在protected，開放一些權限給它人，請對Ruby前輩’饅頭貓’先行閱讀，提供修改建議。&lt;/p&gt;

&lt;p&gt;所以如果在classs外想要取得protected或private方法，都會出現NoMethodError錯誤：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;day6.protected #=&amp;gt; undefined method `protected' (NoMethodError)
day6.private #=&amp;gt; undefined method `private' (NoMethodError)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;當一切修改完畢，就可以放到public區，給大眾分享我的作品、品嚐甜美果實啦！&lt;/p&gt;

&lt;p&gt;以上的類別寫法可以改成：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  class TingsIronmanProcess
    def publish
      p &quot;Hi guys, this is my IT article for today!&quot;
    end

    def mydraft
      p &quot;Hi Mentor! Please read my draft.&quot;
    end

    def myspace
      p &quot;I'm writing secretly here!&quot;
    end

  protected :mydraft
  private :myspace  
  end

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;這種寫法，我覺得蠻類似於在開發Ruby on Rails專案上時常看到， 哪些套件只能在開發環境development使用，哪些在測試環境test、哪些在production環境使用的分組。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem 'sqlite3',             group: :development 
gem 'pg',                  group: :production
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;如果我想把第六天的草稿send給menter看，可以把mydraft當作參數，使用send()方法，結果如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;day6.send(:mydraft) #=&amp;gt; &quot;Hi Mentor! Please read my draft.&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;甚至把文章連結先send給某個人看，也行：(要小心別把不能公開的東西亂放啊！)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;day6.send(:myspace) #=&amp;gt; &quot;Hi guys, this is my IT article for today!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;如果饅頭貓也想使用我的架構來撰寫自己的鐵人賽文章，可以繼承我的類別：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  class TingsIronmanProcess
    protected
    def mydraft
      p &quot;Hi Mentor!&quot;
    end

    private
    def myspace
      p &quot;I'm writing secretly here!&quot;
    end  
  end

  class BaterProcess &amp;lt; TingsIronmanProcess
    def bater_draft
      mydraft
    end
    def bater_self_draft
      self.mydraft
    end     
  end

BaterProcess.new.bater_draft # Hi Mentor!
BaterProcess.new.bater_self_draft #Hi Mentor!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在這裡，我們引入昨天self物件可以代替自身的類別的觀念，無論是self.mydraft或是mydraft，輸出結果都不會有問題。&lt;/p&gt;

&lt;p&gt;但如果呼叫的是Private方法 myspace呢？&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  class BaterProcess &amp;lt; TingsIronmanProcess

    def bater_space
      myspace
    end
    def bater_self_space
      self.myspace
    end      
  end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果我們在這裡使用&lt;code class=&quot;highlighter-rouge&quot;&gt;.self&lt;/code&gt;，就會出錯：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;BaterProcess.new.bater_space # =&amp;gt; I'm writing secretly here!

BaterProcess.new.bater_self_space  # =&amp;gt; private method `myspace' (NoMethodError)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://railsbook.tw/chapters/08-ruby-basic-4.html&quot;&gt;龍哥&lt;/a&gt;的文章說到，呼叫private 方法的時候，不能有明確的接收者。愛注意呀！&lt;/p&gt;

&lt;p&gt;總結： 在寫鐵人賽的文章時，我都盡可能地把前幾篇的概念拿到後面來使用，增加自己觀念上的熟悉度，盡量做到具有教育意義地環環相扣。（&lt;del&gt;顯示為八點檔連續劇製作人?&lt;/del&gt;）&lt;/p&gt;

&lt;p&gt;在今天Day6這篇文章裡，我們把繼承和self的概念拿來測試&lt;code class=&quot;highlighter-rouge&quot;&gt;public&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;protect&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;private&lt;/code&gt;存取方法，也發現了：&lt;/p&gt;

&lt;p&gt;protected :mydraft
private :myspace&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;:mydraft&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;:myspace&lt;/code&gt; 這些冒號在前面的參數。&lt;/p&gt;

&lt;p&gt;這到底是什麼呢？&lt;/p&gt;

&lt;p&gt;明天我們就來討論符號(Symbol)吧！&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;Ref：
&lt;a href=&quot;https://blog.bater.gq/ruby/2018/02/02/top-10-essential-ruby-interview-questions.html&quot;&gt;Top 10 Essential Ruby Interview Questions&lt;/a&gt; |
&lt;a href=&quot;https://github.com/timurcatakli/ruby-on-rails-interview-questions-answers&quot;&gt;Ruby on Rails Technical Interview Questions&lt;/a&gt;| &lt;a href=&quot;https://railsbook.tw/chapters/08-ruby-basic-4.html&quot;&gt;類別（Class）與模組（Module)&lt;/a&gt;|&lt;/p&gt;</content><author><name></name></author><summary type="html">前情提要： 在第五天的最後，我們提到了一句話”相同的class的實體也無法使用別人的singleton method”。在今天，我們繼續把焦點放在Ruby的method, 繼續鋪陳存取限制:)</summary></entry><entry><title type="html">30天修煉Ruby面試精選30題 - Day05 Ruby中的self物件與singleton method</title><link href="http://localhost:4000/ruby/rails/interview/junior/2018/09/14/day05_ruby_interview_questions_self_-singleton_method.html" rel="alternate" type="text/html" title="30天修煉Ruby面試精選30題 - Day05 Ruby中的self物件與singleton method" /><published>2018-09-14T13:08:00+10:00</published><updated>2018-09-14T13:08:00+10:00</updated><id>http://localhost:4000/ruby/rails/interview/junior/2018/09/14/day05_ruby_interview_questions_self_%08%08singleton_method</id><content type="html" xml:base="http://localhost:4000/ruby/rails/interview/junior/2018/09/14/day05_ruby_interview_questions_self_-singleton_method.html">&lt;p&gt;前情提要：
在第四天裡，我們用鐵人賽參賽者的例子解說實例方法與類別方法。
類別中的實體物件，想要玩弄方法時，可以有三種取用方式：（&lt;del&gt;跟斯斯有三種一樣&lt;/del&gt;）&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;該類別所定義的實體方法。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;模組中可取得的實體方法。（關於模組，記得第三天的include與extend比較嗎？）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;類別方法:類別物件的&lt;code class=&quot;highlighter-rouge&quot;&gt;singleton method&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;Class can use methods from three areas:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;1) Instances of class can call methods that are defined as instance methods in their class.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;2) Instances of Class have access to the instance methods defined in Module&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;3) Or instances can call a singleton method of a class object. &lt;a href=&quot;https://medium.com/@lauren.kroner/ruby-class-vs-instance-methods-a5182ce7de49&quot;&gt;出處&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;所以我們在今天要解說一下&lt;code class=&quot;highlighter-rouge&quot;&gt;Self&lt;/code&gt;與&lt;code class=&quot;highlighter-rouge&quot;&gt;singleton method&lt;/code&gt;囉！&lt;/p&gt;

&lt;h1 id=&quot;ruby經典面試題目-05&quot;&gt;Ruby經典面試題目 #05&lt;/h1&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;self是什麼意思？ What does self mean? &lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;self&quot;&gt;self&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt;有豐富層次的含義！ &lt;del&gt;就跟我們的內心一樣&lt;/del&gt; (🎵 🎵 來點播一首陳綺貞的&lt;a href=&quot;https://www.youtube.com/watch?v=H1-kEjeO6SI&quot;&gt;Self&lt;/a&gt;🎵🎵  )&lt;/p&gt;

&lt;p&gt;它雖然代表自己本身的&lt;code class=&quot;highlighter-rouge&quot;&gt;物件Object&lt;/code&gt;，但還記得，我們在第一天說到，Ruby的世界幾乎都是物件嗎?因此，&lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt;有兩種意思：&lt;/p&gt;

&lt;p&gt;&lt;em&gt;1. Self在類別class裡，代表目前的類別&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;2. Self在實體instance裡，代表目前的實體&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;簡單解釋：實體就是物體在記憶體的位置，就好像每個寶寶（實體）生下來，都是從某個媽媽的子宮（記憶體）裡出來的。我們必須經歷過實體化的過程才能成為一個活生生的人呢！&lt;/p&gt;

&lt;p&gt;幸好，產生一個實體不用等”懷胎十月”這麼久，只要像我們在第一天一樣使用&lt;code class=&quot;highlighter-rouge&quot;&gt;@&lt;/code&gt;宣告記憶體位置就可以產生實體變數了：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class LoveSong
  def initialize
     @message = &quot;I was born to love you!&quot; #定義實體變數（instance variable）@message
  end
    def sing_a_song
    puts @message
  end
end

Ting = LoveSong.new
Ting.sing_a_song
 #=&amp;gt; I was born to love you!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;用LoveSong類別另寫一段程式碼實作&lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class LoveSong
  def 
    self.one() 
      &quot;We are the champion!&quot;
  end

  class &amp;lt;&amp;lt; self 
    def two() 
      &quot;We will rock you!&quot;
    end
  end

  p self             # =&amp;gt; LoveSong
  p self.class       # =&amp;gt; Class  
  p self.singleton_methods # [:one, :two]

  p self.one() #=&amp;gt; &quot;We are the champion!&quot;
  p self.two() #=&amp;gt; &quot;We will rock you&quot;
end

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;在這裡的&lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt;代表目前的類別名稱&lt;code class=&quot;highlighter-rouge&quot;&gt;LoveSong&lt;/code&gt;，
我們查詢&lt;code class=&quot;highlighter-rouge&quot;&gt;self.class&lt;/code&gt;還是類別class,而這裡的&lt;code class=&quot;highlighter-rouge&quot;&gt;self.singleton_method&lt;/code&gt;,出現了&lt;code class=&quot;highlighter-rouge&quot;&gt;:one&lt;/code&gt;與&lt;code class=&quot;highlighter-rouge&quot;&gt;:two&lt;/code&gt;這兩個能夠分別印出兩首歌的方法。&lt;/p&gt;

&lt;p&gt;在這裡的&lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt;代表目前的類別名稱&lt;code class=&quot;highlighter-rouge&quot;&gt;LoveSong&lt;/code&gt;， 我們查詢&lt;code class=&quot;highlighter-rouge&quot;&gt;self.class&lt;/code&gt;還是類別&lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt;， 而這裡的&lt;code class=&quot;highlighter-rouge&quot;&gt;self.singleton_method&lt;/code&gt;出現了&lt;code class=&quot;highlighter-rouge&quot;&gt;:one&lt;/code&gt;與&lt;code class=&quot;highlighter-rouge&quot;&gt;:two&lt;/code&gt;這兩個能夠分別印出兩首歌的類別方法(class method)。&lt;/p&gt;

&lt;p&gt;還記得我們在第一天文章曾經提到利用superclass查找父類別的方法嗎？&lt;/p&gt;

&lt;p&gt;類別的父類別，是物件。 &lt;code class=&quot;highlighter-rouge&quot;&gt;class.superclass&lt;/code&gt;是&lt;code class=&quot;highlighter-rouge&quot;&gt;object&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;但其實：每一個類別class上面都還有一層隱形的類別class(&lt;del&gt;隱形的翅膀&lt;/del&gt;)，我們可以稱作metaclass，在Ruby叫eigenclass。&lt;a href=&quot;https://blog.chh.tw/posts/ruby-metaclass-eigenclass/&quot;&gt;出處&lt;/a&gt;]。&lt;/p&gt;

&lt;h3 id=&quot;singleton-method&quot;&gt;Singleton Method&lt;/h3&gt;

&lt;p&gt;單例方法＝單例類別的實體方法。&lt;/p&gt;

&lt;p&gt;（指的是某物件實體「的單例類別」的實體方法，而不是某個物件的實體方法。，中間多夾了一層「單例類別」）&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;singleton methods of an object are not instance methods of the class of the object;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;they are instance methods of the &lt;code class=&quot;highlighter-rouge&quot;&gt;singleton class&lt;/code&gt; of the object.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;當我們講到 &lt;code class=&quot;highlighter-rouge&quot;&gt;Singleton Method&lt;/code&gt;，就會提到&lt;code class=&quot;highlighter-rouge&quot;&gt;Singleton Pattern&lt;/code&gt;單例模式，這個在物件導向語言(如：Java)共同的觀念。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;如果我們能保證某一個類別只產生一個物件實體，而且提供存取該物件的統一方法。這種設計模式就稱為單例模式。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;我們可以直接存取，而不需要實體化此類別的物件。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;什麼時候使用singleton-method&quot;&gt;什麼時候使用&lt;code class=&quot;highlighter-rouge&quot;&gt;Singleton Method&lt;/code&gt;?&lt;/h3&gt;

&lt;p&gt;當我們想控制實體數目，節省系統資源的時候。&lt;/p&gt;

&lt;p&gt;再度把例子🌰搬出來：一間教室裡只有一台印表機，所有電腦都可以連線印表機，但印表機一次只能印出一台電腦上的文件。&lt;/p&gt;

&lt;p&gt;還記得我們在第四天舉的例子是查找鐵人參賽者名單嗎？在這個例子中，一次只能查找一名參賽資料。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class IronmanList
    def self.find(id)
    p &quot;finding Ironman ID: #{id}&quot; 
    end
end 
IronmanList.find(1)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;使用規則：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;此類別只能有一個物件實體。(IronmanList 類別中，只有一個self)&lt;/li&gt;
  &lt;li&gt;此類別必須自己建立自己的唯一實體：def self.find(id)&lt;/li&gt;
  &lt;li&gt;此類別必須給其他物件提供這個實體。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;使用場景：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;此物件是類別中唯一的物件。如同IronmanList鐵人賽的序列號唯一。（跟身份證號碼一樣）&lt;/li&gt;
  &lt;li&gt;當創建此物件需要消耗較的資源過多時，可節省系統資源。（例如：連結資料庫、連結印表機）&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;當我們為實體定義了自已的singleton method，代表了這個方法只屬於該實體，儘管是相同的class的實體也無法使用別人的singleton method。（每個實體的單例類別是不同的。）&lt;/p&gt;

&lt;p&gt;近一步說明類別方法、實體方法，與單例方法的關係。 中文翻譯的話，我們可以這樣記：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;類別的eigenclass(特徵類別)方法 = 類別方法。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;實體的eigenclass(特徵類別)方法 = 單例方法 = 單例類別的實體方法。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;實體方法：&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;已在類別裡定義好了。（如果你需要將實體方法，運用在某個特定的實體。）&lt;/p&gt;

&lt;p&gt;(舉例:”每個人(物件實體)都能贏得鐵人賽”的方法)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;類別方法：&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;並不在類別裡定義，而是在類別裡的物件實體的一種單例方法。（如果此方法並不會和某個特定的實體變數綁在一起，就使用類別方法！）&lt;/p&gt;

&lt;p&gt;(舉例：”查找鐵人賽名單”的方法)&lt;/p&gt;

&lt;p&gt;學程式的好處就是會查找許多原文資料（間接提升英文閱讀功力！）
進一步發現許多原則上的定義用英文表達會更為清楚。&lt;/p&gt;

&lt;p&gt;所以，我們的第四天(實體方法與類別方法)與第五天的總結（單例方法的進一步說明）， 從這段英文就能看得更加清楚之間的關係了：)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Instance methods are methods of a class
(defined in the class’s definition)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Class methods are singleton methods on the Class instance of a class (not defined in the class’s definition)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;they are defined on the singleton class of the object.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ref：
&lt;a href=&quot;https://blog.bater.gq/ruby/2018/02/02/top-10-essential-ruby-interview-questions.html&quot;&gt;Top 10 Essential Ruby Interview Questions&lt;/a&gt; |
&lt;a href=&quot;https://github.com/timurcatakli/ruby-on-rails-interview-questions-answers&quot;&gt;Ruby on Rails Technical Interview Questions&lt;/a&gt; |&lt;a href=&quot;https://www.devalot.com/articles/2008/09/ruby-singleton&quot;&gt;Understanding Ruby Singleton Classes&lt;/a&gt; |&lt;a href=&quot;https://stackoverflow.com/questions/212407/what-exactly-is-the-singleton-class-in-ruby&quot;&gt;What exactly is the singleton class in ruby?&lt;/a&gt; |
&lt;a href=&quot;https://ruby-china.org/topics/13276&quot;&gt;Ruby 如何理解 singleton class&lt;/a&gt; |
&lt;a href=&quot;http://www.runoob.com/design-pattern/singleton-pattern.html&quot;&gt;單例模式 Singleton&lt;/a&gt;|
&lt;a href=&quot;https://medium.com/@zneuray/ruby%E7%9A%84class%E8%88%87eigenclass-f994aa2b988f&quot;&gt;Ruby的Class與Eigenclass&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">前情提要： 在第四天裡，我們用鐵人賽參賽者的例子解說實例方法與類別方法。 類別中的實體物件，想要玩弄方法時，可以有三種取用方式：（跟斯斯有三種一樣）</summary></entry><entry><title type="html">30天修煉Ruby面試精選30題 - Day04 玩弄Ruby的方法: instance method與class method</title><link href="http://localhost:4000/ruby/rails/interview/junior/2018/09/13/day04_ruby_interview_questions_instance_class_method.html" rel="alternate" type="text/html" title="30天修煉Ruby面試精選30題 - Day04 玩弄Ruby的方法: instance method與class method" /><published>2018-09-13T15:50:00+10:00</published><updated>2018-09-13T15:50:00+10:00</updated><id>http://localhost:4000/ruby/rails/interview/junior/2018/09/13/day04_ruby_interview_questions_instance_class_method</id><content type="html" xml:base="http://localhost:4000/ruby/rails/interview/junior/2018/09/13/day04_ruby_interview_questions_instance_class_method.html">&lt;p&gt;前情提要：
在第三天裡，我們解說了如何在class裡用include與extend使用module的method。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Include is for adding methods to an instance of a class.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Extend is for adding class methods. &lt;a href=&quot;http://www.railstips.org/blog/archives/2009/05/15/include-vs-extend-in-ruby/&quot;&gt;出處&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;…Also, it is sometimes ok to use “include” to add both instance and class methods. # 這句話比較進階，之後再研究：）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;並透過圖書館模組的程式碼明白這段話的含義：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;include&lt;/code&gt;是把&lt;code class=&quot;highlighter-rouge&quot;&gt;類別&lt;/code&gt;中的&lt;code class=&quot;highlighter-rouge&quot;&gt;物件實體&lt;/code&gt;加上&lt;code class=&quot;highlighter-rouge&quot;&gt;方法&lt;/code&gt;；&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;extend&lt;/code&gt;是用於&lt;code class=&quot;highlighter-rouge&quot;&gt;類別方法&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;module Library 
  def IThelp 
    p &quot;IThelp helps me!&quot;
  end
end

class NewbieLearnsRuby
  include Library 
end

class ExtendRuby
  extend Library
end

NewbieLearnsRuby.new.IThelp 
# IThelp helps me!

ExtendRuby.IThelp
# IThelp helps me!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;話不多說，進入今天的章節：&lt;/p&gt;

&lt;h1 id=&quot;ruby經典面試題目-04&quot;&gt;Ruby經典面試題目 #04&lt;/h1&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;解釋實體方法與類別方法 Explain instance method and class method.&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;類別方法class-method&quot;&gt;類別方法class method&lt;/h3&gt;

&lt;p&gt;為了瞭解類別方法，我們今天要建立新的類別class:&lt;code class=&quot;highlighter-rouge&quot;&gt;鐵人賽名單IronmanList&lt;/code&gt;，讓這個class利用&lt;code class=&quot;highlighter-rouge&quot;&gt;find方法&lt;/code&gt;，以傳入的id值順利找到某位鐵人賽的參賽者：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class IronmanList
  class &amp;lt;&amp;lt; self
    def find(id)
    p &quot;finding Ironman ID: #{id}&quot; 
    end
  end
end 

IronmanList.find(1)
# finding Ironman ID: 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;當傳入&lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;給&lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt;，會使&lt;code class=&quot;highlighter-rouge&quot;&gt;IronmanList&lt;/code&gt;這個類別，印出&lt;code class=&quot;highlighter-rouge&quot;&gt;finding Ironman ID: 1&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;以上的程式代表，當接收者不是&lt;code class=&quot;highlighter-rouge&quot;&gt;物件object&lt;/code&gt;，而是&lt;code class=&quot;highlighter-rouge&quot;&gt;類別class&lt;/code&gt;本身，就是一個&lt;code class=&quot;highlighter-rouge&quot;&gt;類別方法class method&lt;/code&gt;。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;這邊的&lt;code class=&quot;highlighter-rouge&quot;&gt; &amp;lt;&amp;lt; &lt;/code&gt;指的是&lt;code class=&quot;highlighter-rouge&quot;&gt;push&lt;/code&gt;方法，用在&lt;code class=&quot;highlighter-rouge&quot;&gt;class method&lt;/code&gt;，意思是將&lt;code class=&quot;highlighter-rouge&quot;&gt;self method&lt;/code&gt; push到 &lt;code class=&quot;highlighter-rouge&quot;&gt;類別class&lt;/code&gt;裡。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;鐵人賽名單class也可寫為：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class IronmanList
  #class &amp;lt;&amp;lt; self
    def self.find(id) #在這裡的self is a class Method
    p &quot;finding Ironman ID: #{id}&quot; 
    end
  #end
end 

IronmanList.find(1)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我們把 &lt;code class=&quot;highlighter-rouge&quot;&gt;class &amp;lt;&amp;lt; self ... end&lt;/code&gt; 這部分都用註解消掉，直接使用self這個class method，讓 &lt;code class=&quot;highlighter-rouge&quot;&gt;self.find(id)&lt;/code&gt;與之前呈現出一樣的結果！&lt;/p&gt;

&lt;h3 id=&quot;什麼時候使用class-method&quot;&gt;什麼時候使用class method?&lt;/h3&gt;
&lt;p&gt;當我們要寫class method時，如果此方法並不會和某個特定的實例變數綁在一起，就該使用類別方法！&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;h3 id=&quot;實體方法instance-method&quot;&gt;實體方法（instance method）&lt;/h3&gt;

&lt;p&gt;把鐵人賽名單類別擴充一下，除了&lt;code class=&quot;highlighter-rouge&quot;&gt;find方法&lt;/code&gt;，還有&lt;code class=&quot;highlighter-rouge&quot;&gt;ironmanwinner方法&lt;/code&gt;：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class IronmanList  

  def self.find(id)  
    p &quot;finding Ironman ID: #{id}&quot;  
  end

  def ironmanwinner
    p &quot;I've got a trophy!&quot;
  end

end 

IronmanList.find(1) #這是類別方法
IronmanList.new.ironmanwinner #這是實體方法
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;結果會印出：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;finding Ironman ID: 1
I've got a trophy!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;什麼時候使用instance-method&quot;&gt;什麼時候使用instance method?&lt;/h3&gt;

&lt;p&gt;如果你需要將實體方法，運用在某個特定的實體。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This is often when the functionality concerns the identity of the instance such as calling properties on the object, or invoking behaviour.&lt;a href=&quot;https://www.culttt.com/2015/06/10/understanding-class-methods-verses-instance-methods-in-ruby/&quot;&gt;出處&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;如同鐵人賽的贏家不會只有一個名額，只要能自我挑戰成功，都能練成鐵人：）。
因此我們可以再new更多的物件，盡情使用這個&lt;code class=&quot;highlighter-rouge&quot;&gt;ironmanwinner&lt;/code&gt;實例方法：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class IronmanList  

  def self.find(id)  
  p &quot;finding Ironman ID: #{id}&quot;  
  end

 
  def ironmanwinner
    p &quot;I've got a trophy!&quot;
  end

end 
# IronmanList.find(1)

Ting = IronmanList.new
Ting.ironmanwinner

Bater = IronmanList.new
Bater.ironmanwinner
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;結果印出：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;I've got a trophy!
I've got a trophy!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;同樣的，例子🌰不會只有一種，解釋方法更不會只有一種。我們除了用自己寫的程式碼理解概念，近一步拿關鍵字 &lt;code class=&quot;highlighter-rouge&quot;&gt;instance method class method ruby&lt;/code&gt;去請教Google大神透過網路這座大圖書館，其他工程師們的部落格文章、透過各種文字說明與舉例加深我們的印象。看到排名第一的解釋寫著：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Class can use methods from three areas:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;1) Instances of class can call methods that are defined as instance methods in their class.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;2) Instances of Class have access to the instance methods defined in Module&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;3) Or instances can call a singleton method of a class object. &lt;a href=&quot;https://medium.com/@lauren.kroner/ruby-class-vs-instance-methods-a5182ce7de49&quot;&gt;出處&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;這裡又發現一個新名詞了：&lt;code class=&quot;highlighter-rouge&quot;&gt;singleton method&lt;/code&gt;，這可以成為我們下一篇的素材呢！&lt;/p&gt;

&lt;p&gt;=欲知詳情，下回分解！=&lt;/p&gt;

&lt;p&gt;Ref：
&lt;a href=&quot;https://blog.bater.gq/ruby/2018/02/02/top-10-essential-ruby-interview-questions.html&quot;&gt;Top 10 Essential Ruby Interview Questions&lt;/a&gt; |
&lt;a href=&quot;https://github.com/timurcatakli/ruby-on-rails-interview-questions-answers&quot;&gt;Ruby on Rails Technical Interview Questions&lt;/a&gt; |
&lt;a href=&quot;https://medium.com/@lauren.kroner/ruby-class-vs-instance-methods-a5182ce7de49&quot;&gt;Ruby: Class vs Instance Methods&lt;/a&gt; |
&lt;a href=&quot;https://www.culttt.com/2015/06/10/understanding-class-methods-verses-instance-methods-in-ruby/&quot;&gt;Understanding Class Methods verses Instance Methods in Ruby&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">前情提要： 在第三天裡，我們解說了如何在class裡用include與extend使用module的method。</summary></entry><entry><title type="html">30天修煉Ruby面試精選30題 - Day03 Module模組: include與extend</title><link href="http://localhost:4000/ruby/rails/interview/junior/2018/09/12/day03_ruby_interview_questions_include_vs_extend.html" rel="alternate" type="text/html" title="30天修煉Ruby面試精選30題 - Day03 Module模組: include與extend" /><published>2018-09-12T09:00:00+10:00</published><updated>2018-09-12T09:00:00+10:00</updated><id>http://localhost:4000/ruby/rails/interview/junior/2018/09/12/day03_ruby_interview_questions_include_vs_extend</id><content type="html" xml:base="http://localhost:4000/ruby/rails/interview/junior/2018/09/12/day03_ruby_interview_questions_include_vs_extend.html">&lt;p&gt;前情提要：
在第一天裡，我們很激昂地用Ruby的&lt;code class=&quot;highlighter-rouge&quot;&gt;類別&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;物件&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;方法&lt;/code&gt;，寫了開賽宣言！
在第二天裡，我們比較了方法與模組，比的過程中，發現模組多了包含(inclusion)與延伸(extension)&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;超級比一比&lt;/th&gt;
      &lt;th&gt;類別 Class&lt;/th&gt;
      &lt;th&gt;模組 Module&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;父類別 superclass&lt;/td&gt;
      &lt;td&gt;模組 Module&lt;/td&gt;
      &lt;td&gt;物件 Object&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;繼承 inheritance&lt;/td&gt;
      &lt;td&gt;&lt;em&gt;可繼承&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;不可繼承&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;包含 inclusion&lt;/td&gt;
      &lt;td&gt;不可被包含&lt;/td&gt;
      &lt;td&gt;*可被包含**&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;延伸 extension&lt;/td&gt;
      &lt;td&gt;不可延伸&lt;/td&gt;
      &lt;td&gt;*可被延伸**&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;實例化 instantiation&lt;/td&gt;
      &lt;td&gt;可被實例化(instantiated)&lt;/td&gt;
      &lt;td&gt;不可被實例化&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;所以在第三天的文章裡，進一步研究module中的inclusion和extension是必須的！&lt;/p&gt;

&lt;h1 id=&quot;ruby經典面試題目-03&quot;&gt;Ruby經典面試題目 #03&lt;/h1&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;包含與延伸有什麼不同? What's the Difference Between Include and Extend? &lt;/code&gt;&lt;/p&gt;

&lt;p&gt;還記得我們昨天舉的例子：網路圖書館（模組）有很多知識（方法）讓我們取用（include），
讓你與我都能夠突破先天(繼承)的限制，變成更加聰明靈活的IT人。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;module Library 
  def IThelp 
    p &quot;I'm learning from others' IT articles on IThelp Website!&quot;
  end
end

class EveryoneLearnsRuby
  def initialize(name)
    @name = name
  end
  include Library 
end

Ting = EveryoneLearnsRuby.new(&quot;Ting&quot;) 
Ting.IThelp  
You = EveryoneLearnsRuby.new(&quot;You&quot;)
You. IThlep
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;當然，使用類別(class)繼承也有它的好處，&lt;/p&gt;

&lt;p&gt;例如：在已有的功能基礎上，再追加擴展本身已有功能。
（龍生龍、鳳生鳳；老鼠生的兒子會打洞！）&lt;/p&gt;

&lt;p&gt;或是以相同名稱的方法，重新定義，產生不同的效果。
（王老先生有塊地，&lt;del&gt;那王小弟長大後可以把王老先生的那塊地拿去蓋民宿&lt;/del&gt;。）&lt;/p&gt;

&lt;p&gt;但模組(module)的include就像開外掛一樣，讓我們可以在這個星球上學會更多技能。&lt;/p&gt;

&lt;p&gt;為了比較include與extend，我們把圖書館模組來稍加改寫：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;module Library 
  def IThelp 
    p &quot;IThelp helps me!&quot;
  end
end

class NewbieLearnsRuby
  include Library 
end

NewbieLearnsRuby.new.IThelp 
#IThelp helps me!

NewbieLearnsRuby.IThelp
#NoMethodError
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;如果我們把&lt;code class=&quot;highlighter-rouge&quot;&gt;NewbieLearnsRuby.new.IThelp&lt;/code&gt;誤寫成&lt;code class=&quot;highlighter-rouge&quot;&gt;NewbieLearnsRuby.IThelp&lt;/code&gt;，就會出現錯誤。&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;undefined method `IThelp’ for NewbieLearnsRuby:Class (NoMethodError)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;奇怪，為什麼會這樣呢？&lt;/p&gt;

&lt;p&gt;我們回到改寫前的圖書館例子：我先宣告(new)一個新物件You，
讓「You」這個變數名字指向&lt;code class=&quot;highlighter-rouge&quot;&gt;EveryoneLearnsRuby.new(&quot;You&quot;)&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;You = EveryoneLearnsRuby.new(&quot;You&quot;)
You.IThlep
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;所以剛剛的&lt;code class=&quot;highlighter-rouge&quot;&gt;NewbieLearnsRuby.new.IThelp&lt;/code&gt;其實是以下的簡化：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;You = NewbieLearnsRuby.new
You.IThelp
# [NewbieLearnsRuby.new].IThelp [中括號內的變數就是You!]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;這就是我們為什麼不能漏掉&lt;code class=&quot;highlighter-rouge&quot;&gt;.new&lt;/code&gt;的原因。&lt;/p&gt;

&lt;p&gt;那，如果改寫成extend的程式碼，會是怎樣的光景呢？&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;module Library 
  def IThelp 
    p &quot;IThelp helps me!&quot;
  end
end

class NewbieLearnsRuby
  include Library 
end

class ExtendRuby
  extend Library
end

NewbieLearnsRuby.new.IThelp 
# IThelp helps me!

ExtendRuby.IThelp
# IThelp helps me!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;由以上可知，&lt;code class=&quot;highlighter-rouge&quot;&gt;include&lt;/code&gt;代表Newbie類別學Ruby時需要new一個新的物件實體，然後才能使用方法。
但&lt;code class=&quot;highlighter-rouge&quot;&gt;extend&lt;/code&gt;不用，在類別中使用它可以讓我們直接把方法拿過來用。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ExtendRuby.IThelp
# IThelp helps me!

ExtendRuby.new.IThelp 
# NoMethodError
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;同樣的，想進一步了解為什麼輸入&lt;code class=&quot;highlighter-rouge&quot;&gt;ExtendRuby.new.IThelp &lt;/code&gt;也是&lt;code class=&quot;highlighter-rouge&quot;&gt;NoMethodError&lt;/code&gt;。接下來我們要拿關鍵字 &lt;code class=&quot;highlighter-rouge&quot;&gt;the difference between include and extend in ruby&lt;/code&gt;去請教Google大神：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Now that we know the difference between an instance method and a class method, let’s cover the difference between include and extend in regards to modules. Include is for adding methods to an instance of a class and extend is for adding class methods. &lt;a href=&quot;http://www.railstips.org/blog/archives/2009/05/15/include-vs-extend-in-ruby/&quot;&gt;出處&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;為了抽絲剝繭這段話的含義，這裡的&lt;code class=&quot;highlighter-rouge&quot;&gt;實體方法instance method&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;類別方法class method&lt;/code&gt;將會成為我們下一篇文章的重點囉！&lt;/p&gt;

&lt;p&gt;[第三天感想]&lt;/p&gt;

&lt;p&gt;寫文章真的很有趣！當我寫出&lt;code class=&quot;highlighter-rouge&quot;&gt;NewbieLearnsRuby&lt;/code&gt;這種名稱的class，就彷彿自己像寫一本武俠小說一樣，盡情地創造準備開始練功的新人物、新主角，。&lt;/p&gt;

&lt;p&gt;身為新手工程師，螢幕是我們的畫布～鍵盤上的各個中英文字、數值、符號就是我們的顏料，
享受寫程式 + 寫文章的過程，願我們都可以在人生畫布上，揮灑、創造自己的新世界！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s3-ap-southeast-2.amazonaws.com/tingsrailsdemo/IThelps.png&quot; alt=&quot;https://s3-ap-southeast-2.amazonaws.com/tingsrailsdemo/IThelps.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ref：
&lt;a href=&quot;https://blog.bater.gq/ruby/2018/02/02/top-10-essential-ruby-interview-questions.html&quot;&gt;Top 10 Essential Ruby Interview Questions&lt;/a&gt; |
&lt;a href=&quot;https://github.com/timurcatakli/ruby-on-rails-interview-questions-answers&quot;&gt;Ruby on Rails Technical Interview Questions&lt;/a&gt; |
&lt;a href=&quot;http://www.railstips.org/blog/archives/2009/05/15/include-vs-extend-in-ruby/&quot;&gt;Include vs Extend in Ruby&lt;/a&gt; |
&lt;a href=&quot;https://stackoverflow.com/questions/156362/what-is-the-difference-between-include-and-extend-in-ruby&quot;&gt;What is the difference between include and extend in Ruby?&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">前情提要： 在第一天裡，我們很激昂地用Ruby的類別、物件、方法，寫了開賽宣言！ 在第二天裡，我們比較了方法與模組，比的過程中，發現模組多了包含(inclusion)與延伸(extension)</summary></entry><entry><title type="html">30天修煉Ruby面試精選30題 - Day02 Module模組與Class類別比一比</title><link href="http://localhost:4000/ruby/rails/interview/junior/2018/09/11/day02_ruby_interview_questions_class_vs_module.html" rel="alternate" type="text/html" title="30天修煉Ruby面試精選30題 - Day02 Module模組與Class類別比一比" /><published>2018-09-11T09:40:00+10:00</published><updated>2018-09-11T09:40:00+10:00</updated><id>http://localhost:4000/ruby/rails/interview/junior/2018/09/11/day02_ruby_interview_questions_class_vs_module</id><content type="html" xml:base="http://localhost:4000/ruby/rails/interview/junior/2018/09/11/day02_ruby_interview_questions_class_vs_module.html">&lt;p&gt;前情提要：
在第一天裡，小妹我很激昂地用Ruby的&lt;code class=&quot;highlighter-rouge&quot;&gt;類別&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;物件&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;方法&lt;/code&gt;，寫了開賽宣言！&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class TingIsIronman
  def initialize
    @message = &quot;I'm going to write 30 IT articles in 30 days!&quot;
  end
  def method
    puts @message.gsub(&quot;write&quot;, &quot;create&quot;)
  end
end

object = TingIsIronman.new
object.method
 #=&amp;gt; I'm going to create 30 IT articles in 30 days!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;然後我從探索類別的栗子🌰：查詢&lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt;的父類別時，發現一個鐵錚錚的事實：&lt;code class=&quot;highlighter-rouge&quot;&gt;tw.class.superclass.class.superclass&lt;/code&gt;印出來的結果是&lt;code class=&quot;highlighter-rouge&quot;&gt;moudle&lt;/code&gt;。&lt;code class=&quot;highlighter-rouge&quot;&gt;tw.class.superclass.class.superclass.superclass&lt;/code&gt; 印出來的結果是&lt;code class=&quot;highlighter-rouge&quot;&gt;Object&lt;/code&gt;。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;（白話翻譯吐司：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;「番薯島」的類別是「國家」，「國家的」父類別是「世界」；
「世界」的類別，依舊是個「類別」；「類別」的「父類別」，是個「模組」喔喔喔喔！！！）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;所以在第二天的文章裡，我們就來聊一聊模組(Module)吧！:)&lt;/p&gt;

&lt;h1 id=&quot;ruby經典面試題目-02&quot;&gt;Ruby經典面試題目 #02&lt;/h1&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;類別與模組有什麼不同? What's the Difference Between a Class and a Module? &lt;/code&gt;&lt;/p&gt;

&lt;p&gt;從以上「番薯島」的例子裡，我們從&lt;code class=&quot;highlighter-rouge&quot;&gt;「類別」的「父類別」，是個「模組」&lt;/code&gt; 這句話找到靈感，已經可以做出比較表格的第一列：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;超級比一比&lt;/th&gt;
      &lt;th&gt;類別 Class&lt;/th&gt;
      &lt;th&gt;模組 Module&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;父類別 superclass&lt;/td&gt;
      &lt;td&gt;模組 Module&lt;/td&gt;
      &lt;td&gt;物件 Object&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;從&lt;a href=&quot;https://railsbook.tw/chapters/08-ruby-basic-4.html&quot;&gt;龍哥的Ruby教學裡關於海賊王魯夫的例子&lt;/a&gt;，我得到一個重要的觀念：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;類別可以繼承，而模組不行。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我們在第一篇文章裡已經透過番薯島的例子利用類別過繼承，
現在來讓我們繼續練習繼承的概念，new更多「國家」物件，用Ruby語言，領略世界各國之美：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class World 
    def beautiful(scenery)
      p &quot;#{scenery} is so beautiful!!&quot;
    end
end

class Country &amp;lt; World 
end

tw = Country.new 
au = Country.new
jp = Country.new

tw.beautiful &quot;Taroko Gorge&quot;
au.beautiful &quot;Ayers Rock&quot;
jp.beautiful &quot;Fujisan&quot;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;程式如我們所料，願我們都能透過繼承，看見世界上的每個國家，各自的美好：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Taroko Gorge is so beautiful!!
Ayers Rock is so beautiful!!
Fujisan is so beautiful!!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;說完類別了，來聊模組吧！&lt;/p&gt;

&lt;p&gt;模組就是像是圖書館(library)。
你到了圖書館借了某本程式書籍，把書本裡的「知識」(在程式語言裡，我們叫它做方法method)，吸收、消化，然後，放入(include)到腦袋。&lt;/p&gt;

&lt;p&gt;在父母生下我的年代裡，Ruby還沒有被創造出來（&lt;del&gt;告訴我有哪一個小baby一生下來就會Coding的嘛？沒有嘛！&lt;/del&gt;），&lt;/p&gt;

&lt;p&gt;因此，無論是學習Ruby、或是任何程式語言的知識，需要我們後天透過「網際網路」這個世界上最大的圖書館去學習。
所以，我們可以把模組(module)理解為後天的知識，無法被繼承(inheritance)，而是後天習得的。：）&lt;/p&gt;

&lt;p&gt;來動手寫一個模組，描述上述的情境：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;module Library 
#網路就像是個大型圖書館模組（要以常數，大字英文字母開頭，跟書名一樣）

  def IThelp #定義IT邦方法
    p &quot;I'm learning from others' IT articles on IThelp Website!&quot;
  end
end

class EveryoneLearnsRuby
  def initialize(name)
    @name = name
  end
  include Library 
  #讓每個人學Ruby時都可以使用Library模組
end

Ting = EveryoneLearnsRuby.new(&quot;Ting&quot;) 

# new一個新人物Ting (OS: 大家好我是Ruby新手村民，請多指教！XD)

Ting.IThelp  

# I'm learning from others' IT articles on IThelp Website!

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;如果螢幕前面的你也想要學Ruby的話，當然也可以像我一樣，使用圖書館模組裡的IT邦方法喔！：）&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;You = EveryoneLearnsRuby.new(&quot;You&quot;)
You.IThlep
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;「超級比一比」表格再擴充：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;超級比一比&lt;/th&gt;
      &lt;th&gt;類別 Class&lt;/th&gt;
      &lt;th&gt;模組 Module&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;父類別 superclass&lt;/td&gt;
      &lt;td&gt;模組 Module&lt;/td&gt;
      &lt;td&gt;物件 Object&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;繼承 inheritance&lt;/td&gt;
      &lt;td&gt;可繼承&lt;/td&gt;
      &lt;td&gt;不可繼承&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;包含 inclusion&lt;/td&gt;
      &lt;td&gt;不可被包含&lt;/td&gt;
      &lt;td&gt;可被包含&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;接下來我們要繼續更多探索不同之處。拿 &lt;code class=&quot;highlighter-rouge&quot;&gt;The Difference Between a Class and a Module?&lt;/code&gt;去請教Google大神，
你會發現出現的第一段文字回答是：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The Difference Between a Class and a Module. Basically, a class can be instantiated but a module cannot. A module will never be anything other than a library of methods. A class can be so much more – it can hold its state (by keeping track of instance variables) and be duplicated as many times as you want. &lt;a href=&quot;https://www.vikingcodeschool.com/professional-development-with-ruby/classes-vs-modules&quot;&gt;出處&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;這裡說明一個很重要的概念&lt;code class=&quot;highlighter-rouge&quot;&gt;instantiation&lt;/code&gt;。實體變數（Instance Variables）是在類別class使用時才會被建立，如同我們剛在例子中所舉的：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class EveryoneLearnsRuby
  def initialize(name)
    @name = name
  end
  include Library 
  #讓每個人學Ruby時都可以使用Library模組
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;其中的&lt;code class=&quot;highlighter-rouge&quot;&gt;@name&lt;/code&gt;就是實體變數。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;超級比一比&lt;/th&gt;
      &lt;th&gt;類別 Class&lt;/th&gt;
      &lt;th&gt;模組 Module&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;父類別 superclass&lt;/td&gt;
      &lt;td&gt;模組 Module&lt;/td&gt;
      &lt;td&gt;物件 Object&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;繼承 inheritance&lt;/td&gt;
      &lt;td&gt;可繼承&lt;/td&gt;
      &lt;td&gt;不可繼承&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;包含 inclusion&lt;/td&gt;
      &lt;td&gt;不可被包含&lt;/td&gt;
      &lt;td&gt;可被包含&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;延伸 extension&lt;/td&gt;
      &lt;td&gt;不可延伸&lt;/td&gt;
      &lt;td&gt;可被延伸&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;實例化 instantiation&lt;/td&gt;
      &lt;td&gt;可被實例化(instantiated)&lt;/td&gt;
      &lt;td&gt;不可被實例化&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;今天先寫到這裡，&lt;del&gt;因為網路要斷線了&lt;/del&gt;！預計明天文章會提到extension。
做這個表格時，我發現：跟別人比較，比得好累好辛苦～&lt;/p&gt;

&lt;p&gt;還是跟昨天的自己比就好。
只要每天都有進步，都好！:)&lt;/p&gt;

&lt;p&gt;Ref：
&lt;a href=&quot;https://blog.bater.gq/ruby/2018/02/02/top-10-essential-ruby-interview-questions.html&quot;&gt;Top 10 Essential Ruby Interview Questions&lt;/a&gt; |
&lt;a href=&quot;https://github.com/timurcatakli/ruby-on-rails-interview-questions-answers&quot;&gt;Ruby on Rails Technical Interview Questions&lt;/a&gt; |
&lt;a href=&quot;https://railsbook.tw/chapters/08-ruby-basic-4.html&quot;&gt;類別（Class）與模組（Module)&lt;/a&gt; |
&lt;a href=&quot;https://guides.ruby.tw/ruby/objinitialization.html&quot;&gt;物件初始化 Object initialization&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">前情提要： 在第一天裡，小妹我很激昂地用Ruby的類別、物件、方法，寫了開賽宣言！ ``` class TingIsIronman def initialize @message = “I’m going to write 30 IT articles in 30 days!” end def method puts @message.gsub(“write”, “create”) end end</summary></entry><entry><title type="html">30天修煉Ruby面試精選30題 - Day01 用Class類別寫個參賽宣言吧！</title><link href="http://localhost:4000/ruby/rails/interview/junior/2018/09/10/day01_ruby_interview_questions_class.html" rel="alternate" type="text/html" title="30天修煉Ruby面試精選30題 - Day01 用Class類別寫個參賽宣言吧！" /><published>2018-09-10T09:40:00+10:00</published><updated>2018-09-10T09:40:00+10:00</updated><id>http://localhost:4000/ruby/rails/interview/junior/2018/09/10/day01_ruby_interview_questions_class</id><content type="html" xml:base="http://localhost:4000/ruby/rails/interview/junior/2018/09/10/day01_ruby_interview_questions_class.html">&lt;p&gt;30天修煉Ruby面試精選30題 - 參賽緣起：&lt;/p&gt;

&lt;p&gt;這是我第一次決定參加IT邦鐵人賽！可喜可賀！能夠在鐵人賽第10屆的大日子參賽，就彷彿跟在雪梨馬拉松40週年時拿到42KM馬拉松獎牌一樣榮幸啊啊啊。&lt;/p&gt;

&lt;p&gt;我在學的背景是資訊管理，自從某年開始決定搬去海外闖蕩之後，離開IT相關領域有好一段時間了（&lt;del&gt;顯示為各種指令忘光光&lt;/del&gt;）。後來主要接觸的工作項目都是與客戶服務打交道關，例如零售業、飯店、餐廳、旅館等…。時光飛逝，不知不覺地就過了好幾年。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;這段時間不但結交了國際上五湖四海的好友，為在海外生活增添許多自信，也學會了許多溝通、說服、激勵、銷售、領導的技巧，搜集不同的skill set，這是我的人生當中成長最快的一段日子，我也透過不同環境的磨練，學會更加認識自己、更了解到：其實不論你與我，每一個人的身上，都有蘊藏有無窮的潛力。只是看遇到什麼樣的情境，可以讓你主動激發自己的行動力和成長潛能！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;（然後…英文很重要！英文很重要！英文很重要所以說三次！）&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;最近考慮也許會在明年搬回亞洲發展（台灣或日本），考慮之下IT仍然是值得優先的發展選項。
然而我面臨的問題，如同世界上各個角落的人們一樣，科技變化如此迅速，如何深度工作，聚焦專注，快速掌握一門知識？&lt;/p&gt;

&lt;p&gt;我決定從學習&lt;strong&gt;Ruby on Rails&lt;/strong&gt;開始著手！而且用參與IT邦鐵人賽的機制，&lt;del&gt;逼迫&lt;/del&gt;鼓勵自己在短期間內專心學習與產出知識。&lt;/p&gt;

&lt;h2 id=&quot;a-首先找尋方向決定主題&quot;&gt;A. 首先：找尋方向，決定主題：&lt;/h2&gt;

&lt;p&gt;我想很多人的狀況都跟我一樣：想學新的東西、甚至是想轉進入新的行業，但又不知道該如何入門。&lt;/p&gt;

&lt;p&gt;我以自身的情境為例，假設我從什麼都不懂的情況下出發，如何在一年後，成為能夠面試成功的Ruby Junior Developer?&lt;/p&gt;

&lt;p&gt;後來我受到這篇&lt;a href=&quot;https://blog.bater.gq/ruby/2018/02/02/top-10-essential-ruby-interview-questions.html&quot;&gt;Top 10 Essential Ruby Interview Questions&lt;/a&gt;啟發，我決定從「最常被問到的面試題目」著手，我把學習新知識，和自己的旅行經驗做連結，如同在地球上探索未知的地方一樣，把題目當作地圖上的地標一般的擴展知識。&lt;/p&gt;

&lt;p&gt;如果我能成功做到的話，相信能鼓勵更多台灣朋友勇於挑戰自己，勇於嘗試，接觸更多有趣好玩的資訊領域！&lt;/p&gt;

&lt;h2 id=&quot;b-其次分配技術寫作的時間&quot;&gt;B. 其次：分配技術寫作的時間：&lt;/h2&gt;

&lt;p&gt;身為馬拉松跑者，我相信鐵人賽就好像跑馬拉松一樣，比賽的身體、心理調適，是從幾個月前就開始，做好充足的準備，才能大幅降低斷賽的機率。&lt;/p&gt;

&lt;h3 id=&quot;1-把寫文章的生活規律化&quot;&gt;1. 把寫文章的生活規律化:&lt;/h3&gt;

&lt;p&gt;這是我從第一個Coach（生涯教練）身上學到的，要把時間Block下來，專心做好手頭上的事。我每天早上九點到下午三點到一個會令自己專心的地方技術文章寫作。（還要記得規律運動、還有適時地讓眼睛離開電腦休息一下喔！）&lt;/p&gt;

&lt;h3 id=&quot;2-熟悉it邦的技術文章發布流程&quot;&gt;2. 熟悉IT邦的技術文章發布流程:&lt;/h3&gt;

&lt;p&gt;我在8月到9月這段時間，先練習文章發布，包含使用Markdown語法、草稿與Tag、截圖功能上傳的功能熟悉。&lt;/p&gt;

&lt;p&gt;如同去健身房鍛鍊肌肉一樣，一開始感到不習慣與不舒適（第一個不適應的是：我發的文章會出現輪播在網站首頁，也太害羞了吧！&lt;del&gt;如果文章亂寫或寫錯的話會很羞恥的&lt;/del&gt;）之類的心理調適。&lt;/p&gt;

&lt;p&gt;我也開始看Ruby on Rails專案的線上教學課程，並練習修改一些專案功能，練習適應有bug時的焦慮不耐煩（現在已經接受這是工程師的日常了～撥頭髮~~）以及練習自己找解答、找不出來也要練習提問與求助。&lt;/p&gt;

&lt;h2 id=&quot;c-做好計劃然後按照計劃堅持下去&quot;&gt;C. 做好計劃，然後按照計劃堅持下去！&lt;/h2&gt;

&lt;h3 id=&quot;1-架好環境github帳號-自己blog和可以接受動態功能的網站&quot;&gt;1. 架好環境：Github帳號, 自己blog和可以接受動態功能的網站：&lt;/h3&gt;

&lt;p&gt;工欲善其事，必先利其器。任何有自己的電腦的地方就是辦公桌，而在自己的網站的地方就是實驗場。所以有可以實作測試程式碼的地方是很重要的，才能了解自己到底懂不懂學到的新觀念與工具！&lt;/p&gt;

&lt;h3 id=&quot;2-立馬開始堅持到底&quot;&gt;2. 立馬開始，堅持到底。&lt;/h3&gt;

&lt;p&gt;然後，用行動證明一切：）&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;h1 id=&quot;ruby經典面試題目-01&quot;&gt;Ruby經典面試題目 #01&lt;/h1&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;什麼是類別？What is a Class? &lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;類別(Class)能夠接收資料(data)，利用方法(method)和資料data互動，並且可以建立物件實體(Object instance)。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;以上概念對於程式新手來說，應該會很模糊。我們要了解類別(Class)，就必須知道Ruby是一款物件導向程式語言（Object-Oriented Programming, OOP）。&lt;/p&gt;

&lt;p&gt;而Ruby的世界裡，幾乎所有東西都是物件(Object)。包含數值(Numeric，整數與浮點數)，布林值(True or False)，字串(String)，符號(Symbol，代表固定值)，陣列(Array)，雜湊(Hash)，範圍(Range)到模組(Module)與類別(class)。&lt;/p&gt;

&lt;p&gt;每個物件(Object)就像一台小型的機器一樣，可以「接收資料」、「處理資料」，並「傳遞資料」給其他的物件。&lt;/p&gt;

&lt;p&gt;物件導向程式語言利用「可重複性」的概念來使軟體功能更易於維護。例如，類別(class)具有繼承(inheritance)的能力，讓子類別直接繼承父類別的特性。&lt;/p&gt;

&lt;p&gt;舉個class的例子試試看，並用&lt;code class=&quot;highlighter-rouge&quot;&gt;.superclass&lt;/code&gt;查詢父類別，了解繼承關係：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class World #建立類別名稱「世界」
end

class Country &amp;lt; World #建立「國家」繼承了世界類別
end

tw = Country.new #建立一個新國家:灣灣

p tw.class 						 	# 印出tw的類別
p tw.class.superclass 		   		# 印出tw的的類別(Country)的父類別
p tw.class.superclass.superclass    # 印出tw的的類別(Country)的父類別(World)的父類別
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;在當我們把以上的程式碼在&lt;code class=&quot;highlighter-rouge&quot;&gt;irb&lt;/code&gt;跑出來，會出現：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Country #tw的類別：顯示為Country  
World   #Country的父類別：顯示為World
Object  #World的父類別：顯示為Object
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;雖然上面的程式碼好像繞口令，但如果以蓋大樓為例就會很直觀了：&lt;/p&gt;

&lt;p&gt;tw是一樓，Country是二樓，Ｗorld是三樓，Object是頂樓。
層層上推之後，到了頂樓&lt;code class=&quot;highlighter-rouge&quot;&gt;tw.class.superclass.superclass&lt;/code&gt;，輸出了&lt;code class=&quot;highlighter-rouge&quot;&gt;Object&lt;/code&gt;，
證明從tw，到Country到World都是物件呢！&lt;/p&gt;

&lt;p&gt;這就是Ruby的世界觀：）&lt;/p&gt;

&lt;p&gt;就算到了頂樓層Object，我們還可以繼續下樓梯，用&lt;code class=&quot;highlighter-rouge&quot;&gt;.class&lt;/code&gt;往回推實驗下去，了解Contry的類別：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;p tw.class.superclass.class 	#印出World的類別: Class 
p tw.class.superclass.class.superclass #印出World的類別(Class)的父類別: Module
p &quot;-----break-----&quot;
p tw.class.superclass.class.superclass.class #印出Module的類別: Class
p tw.class.superclass.class.superclass.superclass #印出Module的父類別: Object 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;程式碼顯示出來的結果如下:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Class
Module
&quot;-----break-----&quot;
Class
Object
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;這時我們可以知道，類別(class)與模組(Module)有深厚的關係。
近一步參考：&lt;a href=&quot;https://railsbook.tw/chapters/08-ruby-basic-4.html&quot;&gt;龍哥的文章&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;回到「什麼是類別？」&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;類別(Class)能夠接收資料(data)，建立物件實體(Object instance)，利用方法(method)和資料data互動。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;那我們就來用類別、物件、實體變數，和方法，寫一個開賽宣言吧！&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class TingIsIronman
  def initialize
    @message = &quot;I'm going to write 30 IT articles in 30 days.&quot; #定義實體變數（instance variable）@message
  end

  def method
    puts @message.gsub(&quot;write&quot;, &quot;create&quot;) #gsub方法，可以取代字串
  end
end

object = TingIsIronman.new
object.method
 #=&amp;gt; I'm going to create 30 IT articles in 30 days.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;第一天的練習就到這裡：）希望能繼續解題下去！&lt;/p&gt;

&lt;p&gt;Ref：
&lt;a href=&quot;https://blog.bater.gq/ruby/2018/02/02/top-10-essential-ruby-interview-questions.html&quot;&gt;Top 10 Essential Ruby Interview Questions&lt;/a&gt; |
&lt;a href=&quot;https://github.com/timurcatakli/ruby-on-rails-interview-questions-answers&quot;&gt;Ruby on Rails Technical Interview Questions&lt;/a&gt; |
&lt;a href=&quot;https://railsbook.tw/chapters/08-ruby-basic-4.html&quot;&gt;類別（Class）與模組（Module)&lt;/a&gt; |
&lt;a href=&quot;https://railsbook.tw/chapters/06-ruby-basic-2.html&quot;&gt;數字、字串、陣列、範圍、雜湊、符號&lt;/a&gt; |&lt;/p&gt;</content><author><name></name></author><summary type="html">30天修煉Ruby面試精選30題 - 參賽緣起：</summary></entry><entry><title type="html">活用套件Carrierwave gem: (4)使用Imagemagick修改圖片大小</title><link href="http://localhost:4000/deploy/heroku/ruby/rails/gem/2018/09/09/resize_image_imagemagick_and_minimagick.html" rel="alternate" type="text/html" title="活用套件Carrierwave gem: (4)使用Imagemagick修改圖片大小" /><published>2018-09-09T13:34:00+10:00</published><updated>2018-09-09T13:34:00+10:00</updated><id>http://localhost:4000/deploy/heroku/ruby/rails/gem/2018/09/09/resize_image_imagemagick_and_minimagick</id><content type="html" xml:base="http://localhost:4000/deploy/heroku/ruby/rails/gem/2018/09/09/resize_image_imagemagick_and_minimagick.html">&lt;p&gt;前情提要：
這幾天我都在實驗&lt;a href=&quot;https://github.com/carrierwaveuploader&quot;&gt;Carrierwave&lt;/a&gt;這套圖片上傳套件，也順利部署到Heroku架站正式環境了。：）&lt;/p&gt;

&lt;p&gt;接下來我遇到了新的問題：要如何在上傳的時候，讓Carrierwave gem大型size圖片縮成固定大小，讓整體頁面看起來比較美觀呢？&lt;/p&gt;

&lt;p&gt;解法很簡單！看了&lt;a href=&quot;(https://github.com/carrierwaveuploader/carrierwave#adding-versions)&quot;&gt;Carrierwave&lt;/a&gt;關於&lt;code class=&quot;highlighter-rouge&quot;&gt;image resizing&lt;/code&gt;的說明，只要安裝&lt;a href=&quot;http://cactuslab.com/imagemagick/&quot;&gt;imagemagick&lt;/a&gt;和
&lt;a href=&quot;https://github.com/minimagick/minimagick&quot;&gt;minimagick&lt;/a&gt;就行了。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;[注意]文中提到 You must have Imagemagick and MiniMagick installed to do image resizing. MiniMagick is a Ruby interface for Imagemagick which is a C program. This is why MiniMagick fails on ‘bundle install’ without Imagemagick installed.所以我們的順序是：先裝imagemagick，再裝MiniMagick。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;a-imagemagick&quot;&gt;A. imagemagick&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;首先去&lt;a href=&quot;http://cactuslab.com/imagemagick/&quot;&gt;imagemagick&lt;/a&gt;官網下載適合你作業系統的imagemagick版本。
在terminal輸入指令 &lt;code class=&quot;highlighter-rouge&quot;&gt;convert&lt;/code&gt;可以幫我們確定是否有安裝成功，以及目前安裝版本。我的是&lt;code class=&quot;highlighter-rouge&quot;&gt;ImageMagick 6.9.1-0&lt;/code&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tingdeMacBook-Air:yelpdemo tingtinghsu$ convert
Version: ImageMagick 6.9.1-0 Q16 x86_64 2015-03-22 http://www.imagemagick.org
Copyright: Copyright (C) 1999-2015 ImageMagick Studio LLC
License: http://www.imagemagick.org/script/license.php
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;安裝好之後，還要跑&lt;code class=&quot;highlighter-rouge&quot;&gt;brew install imagemagick&lt;/code&gt;。
（不然就會像我一樣，測試上傳功能功能時出現錯誤訊息！）&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://ithelp.ithome.com.tw/upload/images/20180909/20111177vNOiNwaitw.png&quot; alt=&quot;https://ithelp.ithome.com.tw/upload/images/20180909/20111177vNOiNwaitw.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/31193495/error-original-error-imagemagick-graphicsmagick-is-not-installed&quot;&gt;參考這篇stackoverflow解法&lt;/a&gt;&lt;del&gt;果然身為新手的好處是我遇到的bug都還有人提問過&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;裡面說明，安裝&lt;code class=&quot;highlighter-rouge&quot;&gt;libmagickwand-dev&lt;/code&gt;後才能跑&lt;code class=&quot;highlighter-rouge&quot;&gt;rmagick gem&lt;/code&gt;的功能。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;注意，在Mac環境，下brew指令前需要安裝Homebrew，更多說明可以參考&lt;a href=&quot;https://ithelp.ithome.com.tw/articles/10199014&quot;&gt;之前的文章&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;b-minimagick-gem&quot;&gt;B. minimagick gem&lt;/h2&gt;
&lt;p&gt;接下來到&lt;a href=&quot;https://github.com/minimagick/minimagick&quot;&gt;minimagick&lt;/a&gt;的Github頁面，&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;還記得我們的Gem三步驟：修改Gemfile加入新的gem；跑&lt;code class=&quot;highlighter-rouge&quot;&gt;bundle install&lt;/code&gt;；重啟伺服器&lt;code class=&quot;highlighter-rouge&quot;&gt;rails s&lt;/code&gt;。
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem &quot;mini_magick&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tingdeMacBook-Air:yelpdemo tingtinghsu$ bundle install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;指令&lt;code class=&quot;highlighter-rouge&quot;&gt;bundle info&lt;/code&gt;可幫我們確定版本。目前我的是mini_magick (4.8.0)
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tingdeMacBook-Air:yelpdemo tingtinghsu$ bundle info mini_magick
  * mini_magick (4.8.0)
 Summary: Manipulate images with minimal use of memory via ImageMagick / GraphicsMagick
 Homepage: https://github.com/minimagick/minimagick
 Path: /Users/tingtinghsu/.rvm/gems/ruby-2.4.2/gems/mini_magick-4.8.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;c-修改image_uploaderrb&quot;&gt;C. 修改&lt;code class=&quot;highlighter-rouge&quot;&gt;image_uploader.rb&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;接下來就是讓Carrierwave下的MiniMagick開始工作了！
到&lt;code class=&quot;highlighter-rouge&quot;&gt;專案名/app/uploaders/image_uploader.rb&lt;/code&gt;開始修改程式碼：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class ImageUploader &amp;lt; CarrierWave::Uploader::Base
 include CarrierWave::MiniMagick #將註解消掉
 
 process resize_to_fit: [200, 300] #在這裡的`resize_to_fit`是Carrierwave的其中一個方法
end   
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://www.rubydoc.info/github/jnicklas/carrierwave/CarrierWave%2FMiniMagick:resize_to_fit&quot;&gt;更多關於CarrieWave的Method列表&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;在本機試一下功能是否成功：
&lt;img src=&quot;https://ithelp.ithome.com.tw/upload/images/20180909/20111177yC3uCRNnFa.png&quot; alt=&quot;https://ithelp.ithome.com.tw/upload/images/20180909/20111177yC3uCRNnFa.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;圖片總算如我所願縮小了！最後一步就是：&lt;code class=&quot;highlighter-rouge&quot;&gt;git push heroku master&lt;/code&gt;把新功能deploy至正式環境。&lt;/p&gt;

&lt;p&gt;跟carrierwave套件相處了兩週～就先到這裡啦！接下來會繼續研究更多實用的套件。：）
-全系列完-&lt;/p&gt;

&lt;p&gt;系列文章：
&lt;a href=&quot;https://ithelp.ithome.com.tw/articles/10199014&quot;&gt;將Ruby on Rails專案部署到Heroku&lt;/a&gt; |
&lt;a href=&quot;https://ithelp.ithome.com.tw/articles/10199035&quot;&gt;活用套件carrierwave gem: (1)在Rails實現圖片上傳功能&lt;/a&gt; |
&lt;a href=&quot;https://ithelp.ithome.com.tw/articles/10199103&quot;&gt;活用套件carrierwave gem: (2)利用Amazon S3架設圖片伺服器&lt;/a&gt; |
&lt;a href=&quot;https://ithelp.ithome.com.tw/articles/10199035&quot;&gt;活用套件carrierwave gem: (3)Deploy圖片上傳功能到Heroku網站&lt;/a&gt; |
&lt;a href=&quot;https://ithelp.ithome.com.tw/articles/10199131&quot;&gt;活用套件carrierwave gem: (4)使用Imagemagick修改圖片大小&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">前情提要： 這幾天我都在實驗Carrierwave這套圖片上傳套件，也順利部署到Heroku架站正式環境了。：）</summary></entry><entry><title type="html">活用套件carrierwave gem: (3)Deploy 圖片上傳功能到 Heroku網站</title><link href="http://localhost:4000/deploy/heroku/ruby/rails/gem/2018/09/08/upload_image_function_deploy_heroku.html" rel="alternate" type="text/html" title="活用套件carrierwave gem: (3)Deploy 圖片上傳功能到 Heroku網站" /><published>2018-09-08T13:34:00+10:00</published><updated>2018-09-08T13:34:00+10:00</updated><id>http://localhost:4000/deploy/heroku/ruby/rails/gem/2018/09/08/upload_image_function_deploy_heroku</id><content type="html" xml:base="http://localhost:4000/deploy/heroku/ruby/rails/gem/2018/09/08/upload_image_function_deploy_heroku.html">&lt;p&gt;前情提要：&lt;/p&gt;

&lt;p&gt;身為Ruby新手村民，創造穩定且持續的學習步調很重要，我用的方法就是一週在IT邦寫三篇筆記，希望藉由把筆記和遇到的bug記錄下來的過程，能幫助到未來想用Ruby on Rails架站的新手。：）&lt;/p&gt;

&lt;p&gt;話說我在這一天&lt;a href=&quot;https://ithelp.ithome.com.tw/articles/10199014&quot;&gt;[Ting’s筆記Day4] 將Ruby on Rails專案部署到Heroku&lt;/a&gt;架好了站，並在此篇&lt;a href=&quot;https://ithelp.ithome.com.tw/articles/10199103/edit&quot;&gt;[Ting’s筆記Day7] 活用套件carrierwave gem: (2) 利用Amazon S3架設圖片伺服器&lt;/a&gt;完成我的餐廳資料庫網站的圖片上傳功能。接著就要把功能發佈到Heroku啦！&lt;/p&gt;

&lt;h3 id=&quot;1-修改appuploadersimage_uploaderrb&quot;&gt;1. 修改&lt;code class=&quot;highlighter-rouge&quot;&gt;app/uploaders/image_uploader.rb&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;為了節省Amazon S3用量，（畢竟是免費功能，儲存空間一定的限制，能省則省！）
我想在本機專案上傳圖片時，照片存在本機端就好；
在Heroku（遠端production版本）上傳圖片的時候，再上傳至Amazon S3。&lt;/p&gt;

&lt;p&gt;我可以去&lt;code class=&quot;highlighter-rouge&quot;&gt;app/uploaders/image_uploader.rb&lt;/code&gt;修改一下程式碼從：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;storage :fog
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;改成&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; if Rails.env.production?
    storage :fog #Heroku, Use Amazon S3
  else
    storage :file
  end  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;2-把figaro-gem加入heroku&quot;&gt;2. 把Figaro gem加入Heroku&lt;/h3&gt;
&lt;p&gt;在&lt;a href=&quot;https://ithelp.ithome.com.tw/articles/10199103/edit&quot;&gt;上篇文章&lt;/a&gt;提到了Figaro幫我們隱藏&lt;code class=&quot;highlighter-rouge&quot;&gt;application.yml&lt;/code&gt;檔，做好保護金鑰的功能，由於這個功能動到了config，&lt;del&gt;這件事情的嚴重性(?)&lt;/del&gt;我們必須要讓Heroku知道！&lt;/p&gt;

&lt;p&gt;跟隨著&lt;a href=&quot;https://github.com/laserlemon/figaro#deployment&quot;&gt;Figaro的關於Deployment的說明檔&lt;/a&gt;指示，在ternimal輸入&lt;code class=&quot;highlighter-rouge&quot;&gt;figaro heroku:set -e production&lt;/code&gt;，程式就會把金鑰資訊傳給我在heroku的正式環境。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tingdeMacBook-Air:yelpdemo tingtinghsu$ figaro heroku:set -e production
Setting aws_access_key_id, aws_secret_access_key, fog_directory and restarting ⬢ tingsrailsdemo... done, v7
aws_access_key_id:     #秘密
aws_secret_access_key: #不告訴你
fog_directory:         #Amazon S3 bucket
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;3-把所有改動的程式碼加入github版控並push上heroku&quot;&gt;3. 把所有改動的程式碼加入github版控，並push上Heroku：&lt;/h3&gt;
&lt;p&gt;在&lt;a href=&quot;https://ithelp.ithome.com.tw/articles/10198964&quot;&gt;這篇文章&lt;/a&gt;裡我已經對於git使用的熟練熟練了：
    1.&lt;code class=&quot;highlighter-rouge&quot;&gt;git status&lt;/code&gt;
    2.&lt;code class=&quot;highlighter-rouge&quot;&gt;git add .&lt;/code&gt;
    3.&lt;code class=&quot;highlighter-rouge&quot;&gt;git commit -m &quot;增加照片上傳功能&quot;&lt;/code&gt;
    4.&lt;code class=&quot;highlighter-rouge&quot;&gt;git push&lt;/code&gt;
所以我們先把寫好的的功能推上github，最後用&lt;code class=&quot;highlighter-rouge&quot;&gt;git push heroku master&lt;/code&gt;完成最後一哩路！&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
tingdeMacBook-Air:yelpdemo tingtinghsu$ git push heroku master
Counting objects: 59, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (52/52), done.
Writing objects: 100% (59/59), 331.27 KiB | 0 bytes/s, done.
Total 59 (delta 33), reused 0 (delta 0)

remote:        https://tingsrailsdemo.herokuapp.com/ deployed to Heroku
remote: 
remote: Verifying deploy... done.
To https://git.heroku.com/tingsrailsdemo.git
   cb86240..05af5ff  master -&amp;gt; master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;到Heroku後台查看，新功能已經部署成功~&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ithelp.ithome.com.tw/upload/images/20180908/20111177wWtUHRU8Sz.png&quot; alt=&quot;https://ithelp.ithome.com.tw/upload/images/20180908/20111177wWtUHRU8Sz.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;4-把新更動過的的餐廳圖片資料庫欄位加入heroku&quot;&gt;4. 把新更動過的的餐廳圖片資料庫欄位加入Heroku&lt;/h3&gt;
&lt;p&gt;我們當初改完上傳功能時，已經在本地端使用&lt;code class=&quot;highlighter-rouge&quot;&gt;rake db:migrate&lt;/code&gt;讓資料庫順利運行，&lt;a href=&quot;https://ithelp.ithome.com.tw/articles/10199035&quot;&gt;詳見[Ting’s筆記Day6] 活用套件carrierwave gem: (1)在Rails實現圖片上傳功能 &lt;/a&gt;
但遠端的Heroku部分還沒呢！
因此記得：&lt;code class=&quot;highlighter-rouge&quot;&gt;heroku run rake db:migrate&lt;/code&gt; 更新Production版本的資料庫。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ithelp.ithome.com.tw/upload/images/20180907/20111177VdzU63RJQw.png&quot; alt=&quot;https://ithelp.ithome.com.tw/upload/images/20180907/20111177VdzU63RJQw.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;這裡Heroku出現錯誤訊息&lt;code class=&quot;highlighter-rouge&quot;&gt;Etimeout: connect etimeout 50.19.103.36:5000&lt;/code&gt;
&lt;a href=&quot;https://github.com/heroku/heroku-repo/issues/51&quot;&gt;參考這裡的解法&lt;/a&gt;，才發現我的wifi所在地的防火牆鎖port 5000。&lt;/p&gt;

&lt;p&gt;我使用&lt;code class=&quot;highlighter-rouge&quot;&gt;run:detached&lt;/code&gt;這個指令來解決此問題：&lt;code class=&quot;highlighter-rouge&quot;&gt;heroku run:detached rake db:migrate&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tingdeMacBook-Air:yelpdemo tingtinghsu$ heroku run:detached rake db:migrate
Running rake db:migrate on ⬢ tingsrailsdemo... done, run.2219 (Free)
Run heroku logs --app tingsrailsdemo --dyno run.2219 to view the output.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;= 大功告成 =&lt;/p&gt;

&lt;p&gt;試試網站上的上傳功能，圖片順利存進Amazon S3 :)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ithelp.ithome.com.tw/upload/images/20180908/20111177zR1v7NGgyF.png&quot; alt=&quot;https://ithelp.ithome.com.tw/upload/images/20180908/20111177zR1v7NGgyF.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;系列文章
&lt;a href=&quot;https://ithelp.ithome.com.tw/articles/10199014&quot;&gt;將Ruby on Rails專案部署到Heroku&lt;/a&gt; |
&lt;a href=&quot;https://ithelp.ithome.com.tw/articles/10199035&quot;&gt;活用套件carrierwave gem: (1)在Rails實現圖片上傳功能&lt;/a&gt; |
&lt;a href=&quot;https://ithelp.ithome.com.tw/articles/10199103&quot;&gt;活用套件carrierwave gem: (2)利用Amazon S3架設圖片伺服器&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">前情提要：</summary></entry><entry><title type="html">活用套件carrierwave gem: (2)利用Amazon S3架設圖片伺服器</title><link href="http://localhost:4000/ruby/rails/gem/amazons3/2018/09/05/carrierwave_gem_upload_image_amazon_s3_ruby_on_rails.html" rel="alternate" type="text/html" title="活用套件carrierwave gem: (2)利用Amazon S3架設圖片伺服器" /><published>2018-09-05T14:22:00+10:00</published><updated>2018-09-05T14:22:00+10:00</updated><id>http://localhost:4000/ruby/rails/gem/amazons3/2018/09/05/carrierwave_gem_upload_image_amazon_s3_ruby_on_rails</id><content type="html" xml:base="http://localhost:4000/ruby/rails/gem/amazons3/2018/09/05/carrierwave_gem_upload_image_amazon_s3_ruby_on_rails.html">&lt;p&gt;來到第7篇了！培養寫作習慣真是不容易：）&lt;/p&gt;

&lt;p&gt;在我的上一篇文章&lt;a href=&quot;https://ithelp.ithome.com.tw/articles/10199035&quot;&gt;活用套件carrierwave gem: (1)在Rails實現圖片上傳功能&lt;/a&gt; ，上傳圖片功能已經完成啦！但是目前圖片僅能上傳在自己的本地資料夾內孤芳自賞。&lt;img src=&quot;/images/emoticon/emoticon25.gif&quot; alt=&quot;/images/emoticon/emoticon25.gif&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果我們要把網站完整的功能部署到正式環境，讓其他網路使用者也可以一起上傳圖片，勢必需要一個圖片伺服器。目前最主流的Image Host之一算是AWS(Amazon Web Service)裡的S3（Simple Storage Service）了。
&lt;img src=&quot;https://ithelp.ithome.com.tw/upload/images/20180906/20111177pIw3qpeKPn.png&quot; alt=&quot;https://ithelp.ithome.com.tw/upload/images/20180906/20111177pIw3qpeKPn.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在這邊我們略過申請帳號的過程（需要綁信用卡號，但只要在一年內不超過特定用量就可免費。）
&lt;img src=&quot;https://ithelp.ithome.com.tw/upload/images/20180906/20111177Bo9jdxXMMd.png&quot; alt=&quot;https://ithelp.ithome.com.tw/upload/images/20180906/20111177Bo9jdxXMMd.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;a-安裝fog-aws-gem與figaro-gem&quot;&gt;A. 安裝Fog-AWS Gem與Figaro Gem&lt;/h2&gt;
&lt;p&gt;為了串接carrierwave上傳到Amazon S3的功能，我們回到carrierwave gem在Github的頁面&lt;a href=&quot;https://github.com/carrierwaveuploader/carrierwave#using-amazon-s3&quot;&gt;Using Amazon S3這個段落&lt;/a&gt;好好研究。它要我們在Gemfile裡新增&lt;code class=&quot;highlighter-rouge&quot;&gt;gem “fog-aws”&lt;/code&gt;，然後在&lt;code class=&quot;highlighter-rouge&quot;&gt;carriewave/intializers&lt;/code&gt;下，新增一個檔名稱叫做&lt;code class=&quot;highlighter-rouge&quot;&gt;carrierwave.rb&lt;/code&gt;，。
以它提供的範例程式上寫的上來看：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CarrierWave.configure do |config|
  config.fog_provider = 'fog/aws' #required
  config.fog_credentials = {
    provider:              'AWS', #required
    aws_access_key_id:     'xxx', 
    #required unless using use_iam_profile
    aws_secret_access_key: 'yyy', 
    #required unless using use_iam_profile
    use_iam_profile:       true,  #optional, defaults to false
    region: 'eu-west-1', #optional, defaults to 'us-east-1'
    host: 's3.example.com', #optional, defaults to nil
    endpoint: 'https://s3.example.com:8080' #optional, defaults to nil
  }
  config.fog_directory  = 'name_of_bucket'  #required
  config.fog_public     = false  #optional, defaults to true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;從研讀程式碼的過程中，我們很容易發現到了裡面出現一個使用任何雲端上傳服務都會有的金鑰及安全性的問題！如何避免之後程式碼備份到Github上，Access Key被全世界的人看光光?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;[解決方案]
這時候我們除了fog-aws，還要裝一個gem叫做&lt;a href=&quot;https://github.com/laserlemon/figaro&quot;&gt;Figaro&lt;/a&gt;以解決上述問題。Figaro會幫我們修改Rail的configuration檔，用環境變數&lt;code class=&quot;highlighter-rouge&quot;&gt;ENV&lt;/code&gt;代替金鑰，並產生一個簡單的YAML檔。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;table&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;td&gt;YAML是一種寫法優雅，適合表達、編輯資料結構與各種設定檔的格式（注意：大小寫和TAB鍵敏感！）。YAML近一步了解: &lt;a href=&quot;https://zh.wikipedia.org/wiki/YAML&quot;&gt;Wiki&lt;/a&gt;&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://www.jianshu.com/p/97222440cd08&quot;&gt;簡書&lt;/a&gt;&lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;
&lt;/blockquote&gt;

&lt;p&gt;現在我們馬上來安裝gem:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem 'figaro'
gem &quot;fog-aws&quot; #用雙引號，因為裡面有特殊字元&quot;-&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然後在terminal跑&lt;code class=&quot;highlighter-rouge&quot;&gt;bundle install&lt;/code&gt;，
再重啟伺服器&lt;code class=&quot;highlighter-rouge&quot;&gt;rails s&lt;/code&gt;(安裝gem的三大步驟要牢記！)&lt;/p&gt;

&lt;p&gt;這樣我們一次就裝好了&lt;code class=&quot;highlighter-rouge&quot;&gt;figaro&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;fog-aws&lt;/code&gt;兩支gem。&lt;/p&gt;

&lt;p&gt;接著，按照Figaro主頁README.md檔的指示，到terminal輸入&lt;code class=&quot;highlighter-rouge&quot;&gt;bundle exec figaro install&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tingdeMacBook-Air:yelpdemo tingtinghsu$ bundle exec figaro install
      create  config/application.yml
      append  .gitignore
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;這時候專案就會在config資料夾下產生了新的yml檔：&lt;code class=&quot;highlighter-rouge&quot;&gt;config/application.yml&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;之後&lt;code class=&quot;highlighter-rouge&quot;&gt;git push&lt;/code&gt;專案到git版控伺服器如github，figaro這支gem會用&lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt;隱藏好&lt;code class=&quot;highlighter-rouge&quot;&gt;application.yml&lt;/code&gt;，幫助我們的私密資料無法被它人觀看。&lt;/p&gt;

&lt;p&gt;新手如我在修改程式碼的時候，常常看到一些新名詞，例如剛剛的&lt;code class=&quot;highlighter-rouge&quot;&gt;fog-aws&lt;/code&gt;，這時候去google一下定義，對於程式架構的理解是很有幫助的。我很好奇為何要用&lt;code class=&quot;highlighter-rouge&quot;&gt;fog&lt;/code&gt;(霧?️？)這個名詞。&lt;a href=&quot;https://www.ithome.com.tw/news/114625&quot;&gt;ITHome的這篇文章有提到:&lt;/a&gt;原來fog（霧運算）是相對於cloud（雲端運算）。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;邊緣運算是就近運算的概念，將運算更靠近資料源所在的本地區網（Local Network）內運算，盡可能不用將資料回傳雲端，以減少資料往返雲端的等待時間及降低網路頻寬成本。邊緣運算通常是在本地端和雲端兩邊交界的附近做運算處理，也就是資料進出區網附近的位置，這麼做的目的，在於既可以將運算環境放在本地，同時又可以靠近雲端邊界附近，藉此跟雲銜接。畢竟並不是全部的資料都能放在本地端運算，還是會有些需要更進一步分析及判斷的資料，&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;b-在amazon-s3建立新的bucket&quot;&gt;B. 在Amazon S3建立新的bucket&lt;/h2&gt;
&lt;p&gt;Amazon S3的bucket（儲存桶）是類似雲端資料夾（~&lt;del&gt;霧端資料夾?&lt;/del&gt;）的概念。新手推薦
初期接觸Amazon S3服務的板友們，我很建議去&lt;a href=&quot;https://amazon.qwiklabs.com/focuses/278?locale=en&amp;amp;parent=catalog&quot;&gt;這個lab&lt;/a&gt;按照教學操作，內容設計互動上還挺有趣的～&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ithelp.ithome.com.tw/upload/images/20180906/20111177Ku8YFYXtxw.png&quot; alt=&quot;https://ithelp.ithome.com.tw/upload/images/20180906/20111177Ku8YFYXtxw.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;1-進入amazon-s3-console按下的create-bucket建立bucket&quot;&gt;1. 進入Amazon S3 console，按下的&lt;code class=&quot;highlighter-rouge&quot;&gt;create bucket&lt;/code&gt;建立bucket。&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://ithelp.ithome.com.tw/upload/images/20180906/20111177E8adzs1Dt1.png&quot; alt=&quot;https://ithelp.ithome.com.tw/upload/images/20180906/20111177E8adzs1Dt1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;輸入Bucket Name和Region(區域)。注意（bucket是個物件，你的bucket name必須是個unique name和世界上其他人的bucket name都不一樣）然指定一個區域(region)，不同區域的bucket對於使用者的上傳下載速率有顯著影響。（原來如此！難怪後文出現了卡bug。）我選了我目前所在的城市Sydney。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ithelp.ithome.com.tw/upload/images/20180906/20111177w18xFMYIQx.png&quot; alt=&quot;https://ithelp.ithome.com.tw/upload/images/20180906/20111177w18xFMYIQx.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在設定bucket的Permission頁面時，一開始對於新手來說，將bucket設定為public是較爲容易的學習做法。（如果我們的資料是極為隱密的，就千萬不能這樣做！）&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ithelp.ithome.com.tw/upload/images/20180906/20111177Kx01k6pnVV.png&quot; alt=&quot;https://ithelp.ithome.com.tw/upload/images/20180906/20111177Kx01k6pnVV.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-在bucket內按upload上傳一張圖片或任何檔案記下所在的host和region&quot;&gt;2. 在bucket內按upload上傳一張圖片（或任何檔案），記下所在的host和region。&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://ithelp.ithome.com.tw/upload/images/20180906/20111177eHHnii3B6D.png&quot; alt=&quot;https://ithelp.ithome.com.tw/upload/images/20180906/20111177eHHnii3B6D.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;點開檔案，可以看到每個檔案都會有屬於自己的獨特網址。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ithelp.ithome.com.tw/upload/images/20180906/20111177lvkAxBeeP8.png&quot; alt=&quot;https://ithelp.ithome.com.tw/upload/images/20180906/20111177lvkAxBeeP8.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;s3-ap-southeast-2.amazonaws.com/tingsrailsdemo/Eiffel.jpg&lt;/code&gt;
從這行網址，就可以確認主機&lt;code class=&quot;highlighter-rouge&quot;&gt;s3-ap-southeast-2.amazonaws.com&lt;/code&gt;，區域是&lt;code class=&quot;highlighter-rouge&quot;&gt;ap-southeast-2&lt;/code&gt;，這兩者是我們修改&lt;code class=&quot;highlighter-rouge&quot;&gt;carrierwave.rb&lt;/code&gt;所需要的參數。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    host:&quot;s3-ap-southeast-2.amazonaws.com&quot;, 
    region: &quot;ap-southeast-2&quot; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;3-在sercurity-credentials新增access-key&quot;&gt;3. 在Sercurity Credentials新增Access Key&lt;/h3&gt;

&lt;p&gt;在右上方點擊我們的帳戶，選單上會出現&lt;code class=&quot;highlighter-rouge&quot;&gt;Sercurity Credential&lt;/code&gt;（安全憑證）。按下之後，視窗會提醒你接下來的步驟要小心謹慎，按下&lt;code class=&quot;highlighter-rouge&quot;&gt;Continue to Sercurity Credential&lt;/code&gt;後出現以下畫面：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ithelp.ithome.com.tw/upload/images/20180906/20111177ie0RveFbcU.png&quot; alt=&quot;https://ithelp.ithome.com.tw/upload/images/20180906/20111177ie0RveFbcU.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;點選 &lt;code class=&quot;highlighter-rouge&quot;&gt;Create New Access Key&lt;/code&gt;，然後&lt;code class=&quot;highlighter-rouge&quot;&gt;Download Key File&lt;/code&gt;可以下載新建好的Access Key。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ithelp.ithome.com.tw/upload/images/20180906/20111177cl6vWaB6ow.png&quot; alt=&quot;https://ithelp.ithome.com.tw/upload/images/20180906/20111177cl6vWaB6ow.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;c到專案修改applicationyml&quot;&gt;C.到專案修改application.yml&lt;/h3&gt;

&lt;p&gt;我們用記事本打開熱騰騰剛打好的鑰匙Access Key！在剛剛figaro幫我們製作的&lt;code class=&quot;highlighter-rouge&quot;&gt;application.yml&lt;/code&gt;，放入金鑰id和access key。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pusher_app_id: '放我的id'
pusher_key: '放我的鑰匙'
pusher_secret: '放我的秘密路徑'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;我們使用的是Amazon S3，所以前面三個pusher修改為：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aws_access_key_id: '放我的剛剛建好的id'
aws_secret_access_key: '放我剛剛建好的key'
fog_directory: '我的Amazon S3 bucket名稱'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;以此類推，如果你使用Google Cloud，就要換成Google Cloud的變數和相對應的key。YAML對於任何多的空格space或tab都是敏感的，所以輸入資料時要特別小心。&lt;/p&gt;

&lt;h3 id=&quot;dconfiginitializers新增新檔carrierwaverb代換參數重啟server&quot;&gt;D.&lt;code class=&quot;highlighter-rouge&quot;&gt;Config/initializers&lt;/code&gt;新增新檔&lt;code class=&quot;highlighter-rouge&quot;&gt;carrierwave.rb&lt;/code&gt;，代換參數，重啟server。&lt;/h3&gt;

&lt;p&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;config/initializers/&lt;/code&gt;路徑下，新增&lt;code class=&quot;highlighter-rouge&quot;&gt;carrierwave.rb&lt;/code&gt;，將carrierwave提供給我們程式碼貼過去修改，代換剛才提到figaro幫我們做好的&lt;code class=&quot;highlighter-rouge&quot;&gt;ENV[]&lt;/code&gt;環境變數：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CarrierWave.configure do |config|
  config.fog_provider = 'fog/aws'                        # required
  config.fog_credentials = {
    provider:              'AWS',                        # required
    aws_access_key_id:     ENV[&quot;aws_access_key_id&quot;],                        
    aws_secret_access_key: ENV[&quot;aws_secret_access_key&quot;],                        
    host: 				   &quot;s3-ap-southeast-2.amazonaws.com&quot;, 
    region:                &quot;ap-southeast-2&quot; 
  }
  config.fog_directory  = ENV[&quot;fog_directory&quot;]           # required
# optional, defaults to {}
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;這邊我們更動到了&lt;code class=&quot;highlighter-rouge&quot;&gt;config&lt;/code&gt;檔案，記得要重啟伺服器&lt;code class=&quot;highlighter-rouge&quot;&gt;rails s&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;[Bug注意！]&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    host: 				   &quot;s3-ap-southeast-2.amazonaws.com&quot;, 
    region:                &quot;ap-southeast-2&quot; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;這兩行要代換成你所選擇的Amazon aws伺服器主機區域，不然會產生問題！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ithelp.ithome.com.tw/upload/images/20180906/20111177RzHA23ADLx.png&quot; alt=&quot;https://ithelp.ithome.com.tw/upload/images/20180906/20111177RzHA23ADLx.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;後來我用關鍵字&lt;code class=&quot;highlighter-rouge&quot;&gt;Excon::Errors::SocketError Broken pipe (Errno::EPIPE)&lt;/code&gt;參考了&lt;a href=&quot;http://www.whatibroke.com/2013/04/27/exconerrorssocketerror-broken-pipe-errnoepipe-ruby-on-rails/&quot;&gt;這篇網誌&lt;/a&gt;終於搞定！&lt;/p&gt;

&lt;p&gt;（跟Amazon S3相關功能的熟悉和隨之而來的bug讓我卡了兩天&lt;img src=&quot;/images/emoticon/emoticon14.gif&quot; alt=&quot;/images/emoticon/emoticon14.gif&quot; /&gt;）這篇文章的得來不易啊…。&lt;/p&gt;

&lt;h2 id=&quot;c-修改carriewave的uploaderrb&quot;&gt;C. 修改carriewave的&lt;code class=&quot;highlighter-rouge&quot;&gt;uploader.rb&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;去&lt;code class=&quot;highlighter-rouge&quot;&gt;app/uploaders/image_uploader.rb&lt;/code&gt;，把&lt;code class=&quot;highlighter-rouge&quot;&gt;storage :file&lt;/code&gt;加上註解，消去&lt;code class=&quot;highlighter-rouge&quot;&gt;storage :fog&lt;/code&gt;的註解，讓carriewave知道，現在我們要把圖片要上傳到Amazon S3去。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class ImageUploader &amp;lt; CarrierWave::Uploader::Base
  # Choose what kind of storage to use for this uploader:
  # storage :file
  storage :fog #Use Amazon S3
  end  
    def store_dir
    &quot;uploads/#{model.class.to_s.underscore}/#{mounted_as}/#{model.id}&quot;
  end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;=大功告成！=
試著用本機功能的上傳按鈕傳圖片，再點開圖片網址確認。
這張照片已經放入Amazon S3的bucket囉！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ithelp.ithome.com.tw/upload/images/20180906/20111177J82YqrpNra.png&quot; alt=&quot;https://ithelp.ithome.com.tw/upload/images/20180906/20111177J82YqrpNra.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我很開心地修改3家餐廳的資料，去Amazon S3的bucket確認，圖片已經安安穩穩地躺在路徑&lt;code class=&quot;highlighter-rouge&quot;&gt;/upload/restaurant/image/餐廳id&lt;/code&gt;裡了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ithelp.ithome.com.tw/upload/images/20180906/20111177pj9sTL6bkv.png&quot; alt=&quot;https://ithelp.ithome.com.tw/upload/images/20180906/20111177pj9sTL6bkv.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;下一篇要講把上傳Amazon S3的新功能Deploy部署到Heroku上！&lt;/p&gt;

&lt;p&gt;我的Rails專案系列文章整理：
&lt;a href=&quot;https://ithelp.ithome.com.tw/articles/10199035&quot;&gt;[Ting’s筆記Day6] 活用套件carrierwave gem: (1)在Rails實現圖片上傳功能&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://ithelp.ithome.com.tw/articles/10199016&quot;&gt;[Ting’s筆記Day5] 在部署到Heroku之前，將Rails專案從SQLite設定為PostgreSQL&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://ithelp.ithome.com.tw/articles/10199014&quot;&gt;[Ting’s筆記Day4] 將Ruby on Rails專案部署到Heroku&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ref:
&lt;a href=&quot;https://www.ithome.com.tw/tech/88760&quot;&gt;AWS活用術｜善用容量無上限的S3儲存服務&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://streamer-forest.com/amazon-s3-tutorial-p1.html&quot;&gt;Amazon S3 簡易儲存服務介紹與教學(1/3)&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">來到第7篇了！培養寫作習慣真是不容易：）</summary></entry><entry><title type="html">活用套件carrierwave gem: (1)在Rails實現圖片上傳功能</title><link href="http://localhost:4000/ruby/rails/gem/carrierwave/2018/09/04/carrierwave_gem_upload_image_localhost_ruby_on_rails.html" rel="alternate" type="text/html" title="活用套件carrierwave gem: (1)在Rails實現圖片上傳功能" /><published>2018-09-04T16:05:00+10:00</published><updated>2018-09-04T16:05:00+10:00</updated><id>http://localhost:4000/ruby/rails/gem/carrierwave/2018/09/04/carrierwave_gem_upload_image_localhost_ruby_on_rails</id><content type="html" xml:base="http://localhost:4000/ruby/rails/gem/carrierwave/2018/09/04/carrierwave_gem_upload_image_localhost_ruby_on_rails.html">&lt;p&gt;&lt;a href=&quot;https://github.com/carrierwaveuploader/carrierwave&quot;&gt;carrierwave&lt;/a&gt;是一款經典的圖片上傳套件，本篇的目標是先在本地端(development)的rails專案試成功gem。
（預計中集的進度會練習怎麼利用Amazone S3架設圖片上傳Host，
並再下集遠端(production)實作上傳，敬請期待！）&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ithelp.ithome.com.tw/upload/images/20180904/20111177jA3W9YiK5l.png&quot; alt=&quot;https://ithelp.ithome.com.tw/upload/images/20180904/20111177jA3W9YiK5l.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在閱讀任何Github上的README.md，有一點很重要的是知道因為環境設定的不同，必須漸漸了解哪些步驟可以跳過、哪些變數需要修改成符合自己專案性質的名稱，這點身為新手的我，將會靠練習活用各式各樣的gem來進步。：）&lt;/p&gt;

&lt;p&gt;這次我們會更動的檔案/資料夾如下：
Rails的架構 | 說明
—|—–
Gemfile | 設定Rails應用程式使用了哪些Gems套件
app |放Controllers、Models和Views檔案&lt;/p&gt;

&lt;p&gt;接下來就按造步驟來實作吧！&lt;/p&gt;

&lt;h3 id=&quot;a-在gemfile加入套件重啟rails-server&quot;&gt;A. 在&lt;code class=&quot;highlighter-rouge&quot;&gt;gemfile&lt;/code&gt;加入套件，重啟rails server：&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;首先我們按照&lt;a href=&quot;https://github.com/carrierwaveuploader/carrierwave&quot;&gt;carrierwave&lt;/a&gt;在githhub上說明檔的指示，前往&lt;code class=&quot;highlighter-rouge&quot;&gt;/專案名稱/gemfile&lt;/code&gt;，新增程式碼：
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem 'carrierwave', '~&amp;gt; 1.0'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;blockquote&gt;
      &lt;p&gt;README.md告訴我們CarrierWave的版本需求：Rails 4.0 or higher and Ruby 2.0，我的ruby 2.4.2 Rails 5.1.6，所以沒有問題～&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;每次新增任何新的Gem到Gemfile，就要在Terminal輸入&lt;code class=&quot;highlighter-rouge&quot;&gt;bundle install&lt;/code&gt;處理相依性，然後&lt;code class=&quot;highlighter-rouge&quot;&gt;rails s&lt;/code&gt;重啟伺服器。
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tingdeMacBook-Air:yelpdemo tingtinghsu$ bundle install
tingdeMacBook-Air:yelpdemo tingtinghsu$ bundle info carrierwave
  * carrierwave (1.2.3)
 Summary: Ruby file upload library
 Homepage: https://github.com/carrierwaveuploader/carrierwave
 Path: /Users/tingtinghsu/.rvm/gems/ruby-2.4.2/gems/carrierwave-1.2.3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;b-用rails-g指令新增image-uploader功能&quot;&gt;B. 用&lt;code class=&quot;highlighter-rouge&quot;&gt;rails g&lt;/code&gt;指令，新增Image uploader功能&lt;/h3&gt;
&lt;p&gt;接下來就可以看到carrierwave的厲害之處了，在此我需要將自己的餐廳(restaurants)資料庫建立新的圖片(image)欄位，所以把carrier的指令客製化成自己的專案。
指令&lt;code class=&quot;highlighter-rouge&quot;&gt;rails g uploader Image&lt;/code&gt;幫助我們在此路徑：&lt;code class=&quot;highlighter-rouge&quot;&gt;app/uploaders/image_uploader.rb&lt;/code&gt;新增了檔案。
打開&lt;code class=&quot;highlighter-rouge&quot;&gt;image_uploader.rb&lt;/code&gt;看看裡面的類別寫法：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class ImageUploader &amp;lt; CarrierWave::Uploader::Base
  storage :file
  #storage :fog
  # Override the directory where uploaded files will be stored.
  # def store_dir
    &quot;uploads/#{model.class.to_s.underscore}/#{mounted_as}/#{model.id}&quot;
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;這個部分指的是：
如果我把儲存檔案的地方放在本地端(localhost)，就要把storage :file前的#註解拿掉
相對的，想要把儲存檔案的地方放在遠端(Heroku)，把storage :fog前的#註解拿掉&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在本篇裡，CarrierWave會把我上傳的圖片將會放在&lt;code class=&quot;highlighter-rouge&quot;&gt;/public/uploads/restaurant/image&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&quot;c-建立資料庫上傳image所需欄位&quot;&gt;C. 建立資料庫上傳Image所需欄位&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;建立遷移檔(migration，修改資料庫結構)
&lt;code class=&quot;highlighter-rouge&quot;&gt;rails g migration add_image_to_restaurants image:string&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;並在資料庫增加上傳圖片的欄位:
&lt;code class=&quot;highlighter-rouge&quot;&gt;rake db:migrate&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;然後重啟伺服器：&lt;code class=&quot;highlighter-rouge&quot;&gt;rails s&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;順利的在&lt;code class=&quot;highlighter-rouge&quot;&gt;db/migrate&lt;/code&gt;跑出了&lt;code class=&quot;highlighter-rouge&quot;&gt;add_image_to_restaurants.rb&lt;/code&gt;檔案。打開來瞧瞧：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class AddImageToRestaurants &amp;lt; ActiveRecord::Migration[5.1]
  def change
    add_column :restaurants, :image, :string
  end
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;d-修改models讓資料庫準備好存取圖片的功能&quot;&gt;D. 修改Models，讓資料庫準備好存取圖片的功能&lt;/h3&gt;

&lt;p&gt;接下來我們修改跟ActiveRecord有關的Models。mount Model裡面，這個名為uploader上傳功能小幫手，未來它會幫我們翻譯資料庫語言(SQL)跟資料庫要資料（餐廳圖片）。:&lt;/p&gt;

&lt;p&gt;Models: &lt;code class=&quot;highlighter-rouge&quot;&gt;app/models/restaurant.rb&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class User &amp;lt; ActiveRecord::Base
  mount_uploader :image, ImageUploader
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在&lt;a href=&quot;https://rails.ruby.tw/active_record_basics.html&quot;&gt;rails官網&lt;/a&gt;提到：&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Active Record 是MVC的M（Model）表現商業邏輯與資料的層級，負責新增與操作需要持久存在資料庫裡的資料。Active Record本身是ORM（Object Relational Mapping，物件關聯映射）系統的描述。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;e-修改views&quot;&gt;E. 修改Views&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;資料庫的上傳功能已經準備好了，接下來到Views跟表單溝通，請讓表單能夠接受上傳的圖片。
首先到&lt;code class=&quot;highlighter-rouge&quot;&gt;app/views/restaurants/_form.html.erb&lt;/code&gt;，修改成可以上傳照片的form type(表單型態)。&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;%= form_with(model: restaurant, local: true, :html =&amp;gt; { multipart: true }) do |form| %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;我們來增加：「上傳圖片」欄位，讓使用者能在視覺上看得見新欄位，並修改上傳圖片的檔案(file)類型為&lt;code class=&quot;highlighter-rouge&quot;&gt;form.file_field&lt;/code&gt;，不同於其他純文字(text)欄位如地址、電話的&lt;code class=&quot;highlighter-rouge&quot;&gt;form.text_field&lt;/code&gt;。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;lt;div class=&quot;form-group&quot;&amp;gt;
    &amp;lt;%= form.label :name %&amp;gt;
    &amp;lt;%= form.text_field :name, id: :restaurant_name, class: &quot;form-control&quot; %&amp;gt;
  &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;lt;div class=&quot;form-group&quot;&amp;gt;
    &amp;lt;%= form.label :image %&amp;gt;
    &amp;lt;%= form.file_field :image, id: :restaurant_image, class: &quot;form-control&quot; %&amp;gt;
  &amp;lt;/div&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;告訴rails何時取得image。我們來到&lt;code class=&quot;highlighter-rouge&quot;&gt;app/views/restaurants/show.html.erb&lt;/code&gt;，在餐廳資料前面加上程式碼：&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;p id=&quot;notice&quot;&amp;gt;&amp;lt;%= notice %&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;%= image_tag @restaurant.image_url if @restaurant.image_url.present? %&amp;gt;
&amp;lt;p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;p&amp;gt;
  &amp;lt;strong&amp;gt;Name:&amp;lt;/strong&amp;gt;
  &amp;lt;%= @restaurant.name %&amp;gt;
&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;image_tag&lt;/code&gt;：Rails內建的Helper靜態輔助方法，可以讓我們建構HTML更為容易。&lt;a href=&quot;https://ihower.tw/rails/actionview-helpers.html&quot;&gt;參考這裡&lt;/a&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;@restaurant.image_url&lt;/code&gt;：顯示目前這筆餐廳資料的圖片位置。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;[新手常見Bug！]檢查圖片為nil寫法：&lt;code class=&quot;highlighter-rouge&quot;&gt;if @restaurant.image_url.present?&lt;/code&gt;。可以防止當某位使用者新增一筆餐廳資料、但沒有附上圖片的時候，show.html.erb這頁網頁直接當掉給你看…&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;f-修改controllers&quot;&gt;F. 修改Controllers&lt;/h3&gt;

&lt;p&gt;最後，我們在Controllers: &lt;code class=&quot;highlighter-rouge&quot;&gt;app/controllers/restaurants.controller.rb&lt;/code&gt;加上允許上傳至欄位的參數，告訴rails，新的image欄位是安全的。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    def restaurant_params
      params.require(:restaurant).permit(:name, :address, :phone, :website, :image)
    end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;**大功告成 **&lt;/p&gt;

&lt;p&gt;觀看結果：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ithelp.ithome.com.tw/upload/images/20180904/20111177bgD1sd8o0E.png&quot; alt=&quot;https://ithelp.ithome.com.tw/upload/images/20180904/20111177bgD1sd8o0E.png&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">carrierwave是一款經典的圖片上傳套件，本篇的目標是先在本地端(development)的rails專案試成功gem。 （預計中集的進度會練習怎麼利用Amazone S3架設圖片上傳Host， 並再下集遠端(production)實作上傳，敬請期待！）</summary></entry></feed>